{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _jsxFileName = \"C:\\\\sites\\\\fo-github\\\\app\\\\layout\\\\audio.js\",\n    _this = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useContext } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Audio } from \"expo-av\";\nimport AppContext from \"../utilities/context\";\nimport styles from \"../content/css/styles\";\nimport { Icon } from \"react-native-elements\";\nimport { mp3Folder, GetFileInfo } from \"../utilities/files\";\nimport constants from \"../utilities/constants.json\";\n\nvar AudioBtn = function (_Component) {\n  _inherits(AudioBtn, _Component);\n\n  var _super = _createSuper(AudioBtn);\n\n  function AudioBtn(props) {\n    _classCallCheck(this, AudioBtn);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(AudioBtn, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Audio.setAudioModeAsync({\n        allowsRecordingIOS: false,\n        interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n        playsInSilentModeIOS: true,\n        shouldDuckAndroid: true,\n        interruptionModeAndroid: Audio.INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,\n        playThroughEarpieceAndroid: false,\n        staysActiveInBackground: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(GetAudioBtn, {\n        media: this.props.media,\n        title: this.props.title,\n        exist: this.props.exist,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return AudioBtn;\n}(Component);\n\nexport { AudioBtn as default };\n\nvar GetAudioBtn = function GetAudioBtn(props) {\n  var appStateContext = useContext(AppContext);\n\n  var playAudioHandler = function playAudioHandler() {\n    return _regeneratorRuntime.async(function playAudioHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!(appStateContext.audioPlayingMedia === props.media)) {\n              _context.next = 19;\n              break;\n            }\n\n            if (!(appStateContext.audioPlayingStatus === constants.audioStatus.unloaded)) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(_loadNewAudio(props.media));\n\n          case 5:\n            if (!(appStateContext.audioPlayingStatus === constants.audioStatus.playing)) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(_pauseAudio());\n\n          case 8:\n            _context.next = 17;\n            break;\n\n          case 10:\n            if (!(appStateContext.audioPlayingStatus === constants.audioStatus.resume)) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(_resumeAudio());\n\n          case 13:\n            _context.next = 17;\n            break;\n\n          case 15:\n            _context.next = 17;\n            return _regeneratorRuntime.awrap(_loadNewAudio(props.media));\n\n          case 17:\n            _context.next = 25;\n            break;\n\n          case 19:\n            if (!(appStateContext.audioPlayingStatus === constants.audioStatus.playing)) {\n              _context.next = 23;\n              break;\n            }\n\n            Alert.alert(\"中断播放\", \"正在播放 \" + props.title + \", 是否中断当前播放\");\n            _context.next = 25;\n            break;\n\n          case 23:\n            _context.next = 25;\n            return _regeneratorRuntime.awrap(_loadNewAudio(props.media));\n\n          case 25:\n            _context.next = 31;\n            break;\n\n          case 27:\n            _context.prev = 27;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            Alert.alert(\"加载出错\", \"无法加载新音频，请尝试推出当前页面或重启APP\");\n\n          case 31:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 27]], Promise);\n  };\n\n  var _loadNewAudio = function _loadNewAudio(media) {\n    var source, newPlayback, initialStatus;\n    return _regeneratorRuntime.async(function _loadNewAudio$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            source = {\n              uri: mp3Folder + media\n            };\n            newPlayback = new Audio.Sound();\n            initialStatus = {\n              shouldPlay: true,\n              rate: 1.0,\n              shouldCorrectPitch: true,\n              volume: 1.0,\n              isMuted: false\n            };\n            appStateContext.set_audio_playing_media(media);\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(newPlayback.loadAsync(source, initialStatus, false).then(function (playbackStatus) {\n              newPlayback.setIsLoopingAsync(true);\n              appStateContext.set_audio_player_instance(newPlayback);\n              appStateContext.set_audio_playing_status(constants.audioStatus.playing);\n              console.log(\"loading finished: \" + JSON.stringify(playbackStatus));\n            }).catch(function (error) {\n              console.log(\"loading audio error: \" + error);\n              Alert.alert(\"加载出错\", \"无法加载音频，请尝试推出当前页面\");\n            }));\n\n          case 7:\n            _context2.next = 13;\n            break;\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n            Alert.alert(\"加载出错\", \"无法加载音频，请尝试推出当前页面\");\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  var _pauseAudio = function _pauseAudio() {\n    var currentPlayback;\n    return _regeneratorRuntime.async(function _pauseAudio$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            currentPlayback = appStateContext.audioPlayerInstance;\n            _context3.prev = 1;\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(currentPlayback.pauseAsync().then(function () {\n              appStateContext.set_audio_player_instance(currentPlayback);\n              appStateContext.set_audio_playing_status(constants.audioStatus.paused);\n              console.log(\"paused finished: \");\n            }).catch(function (error) {\n              console.log(\"pause audio error: \" + error);\n              Alert.alert(\"播放出错\", \"无法暂停音频，请尝试重启\");\n            }));\n\n          case 4:\n            _context3.next = 10;\n            break;\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3[\"catch\"](1);\n            console.log(_context3.t0);\n            Alert.alert(\"播放出错\", \"无法暂停音频，请尝试重启APP\");\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[1, 6]], Promise);\n  };\n\n  var _resumeAudio = function _resumeAudio() {\n    var currentPlayback;\n    return _regeneratorRuntime.async(function _resumeAudio$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            currentPlayback = appStateContext.audioPlayerInstance;\n            _context4.prev = 1;\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(currentPlayback.playAsync().then(function () {\n              appStateContext.set_audio_player_instance(currentPlayback);\n              appStateContext.set_audio_playing_status(constants.audioStatus.playing);\n              console.log(\"play finished: \");\n            }).catch(function (error) {\n              console.log(\"play audio error: \" + error);\n              Alert.alert(\"播放出错\", \"无法重新播放音频，请尝试重启\");\n            }));\n\n          case 4:\n            _context4.next = 10;\n            break;\n\n          case 6:\n            _context4.prev = 6;\n            _context4.t0 = _context4[\"catch\"](1);\n            console.log(_context4.t0);\n            Alert.alert(\"播放出错\", \"无法重新播放音频，请尝试重启APP\");\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[1, 6]], Promise);\n  };\n\n  var _unloadAudio = function _unloadAudio() {\n    var currentPlayback;\n    return _regeneratorRuntime.async(function _unloadAudio$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            currentPlayback = appStateContext.audioPlayerInstance;\n            _context5.prev = 1;\n            _context5.next = 4;\n            return _regeneratorRuntime.awrap(currentPlayback.unloadAsync().then(function () {\n              appStateContext.set_audio_player_instance(currentPlayback);\n              appStateContext.set_audio_playing_status(constants.audioStatus.unloaded);\n              console.log(\"unload finished: \");\n            }).catch(function (error) {\n              console.log(\"unload audio error: \" + error);\n              Alert.alert(\"播放出错\", \"无法终止播放音频，请尝试重启\");\n            }));\n\n          case 4:\n            _context5.next = 10;\n            break;\n\n          case 6:\n            _context5.prev = 6;\n            _context5.t0 = _context5[\"catch\"](1);\n            console.log(_context5.t0);\n            Alert.alert(\"播放出错\", \"无法终止播放音频，请尝试重启APP\");\n\n          case 10:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[1, 6]], Promise);\n  };\n\n  if (props.exist === true) {\n    if (appStateContext.downloadStatus !== constants.downloadStatus.notStarted && appStateContext.downloadMedia === props.media) {\n      return React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 14\n        }\n      });\n    } else {\n      return React.createElement(TouchableOpacity, {\n        style: styles.headerAudio,\n        onPress: playAudioHandler,\n        onLongPress: function onLongPress() {\n          if (appStateContext.audioPlayingStatus === constants.audioStatus.playing || appStateContext.audioPlayingStatus === constants.audioStatus.paused) {\n            Alert.alert(\"终止播放\", \"正在播放音频\" + props.title + \"，是否要终止当前播放？\", [{\n              text: \"取消\",\n              onPress: function onPress() {\n                return console.log(\"Cancel Pressed\");\n              },\n              style: \"cancel\"\n            }, {\n              text: \"确认\",\n              onPress: function onPress() {\n                return _unloadAudio();\n              }\n            }], {\n              cancelable: true\n            });\n          }\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 9\n        }\n      }, React.createElement(GetAudioIcon, {\n        media: props.media,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }\n      }));\n    }\n  } else {\n    return React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 12\n      }\n    });\n  }\n};\n\nvar GetAudioIcon = function GetAudioIcon(props) {\n  var appStateContext = useContext(AppContext);\n  var iconName = \"play\";\n\n  if (appStateContext.audioPlayingMedia === props.media && appStateContext.audioPlayingStatus === constants.audioStatus.playing) {\n    iconName = \"pause\";\n  }\n\n  return React.createElement(Icon, {\n    name: iconName,\n    type: \"font-awesome\",\n    color: \"#ffffff\",\n    containerStyle: styles.headerPlayer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["C:/sites/fo-github/app/layout/audio.js"],"names":["React","Component","useContext","Audio","AppContext","styles","Icon","mp3Folder","GetFileInfo","constants","AudioBtn","props","setAudioModeAsync","allowsRecordingIOS","interruptionModeIOS","INTERRUPTION_MODE_IOS_DO_NOT_MIX","playsInSilentModeIOS","shouldDuckAndroid","interruptionModeAndroid","INTERRUPTION_MODE_ANDROID_DO_NOT_MIX","playThroughEarpieceAndroid","staysActiveInBackground","media","title","exist","GetAudioBtn","appStateContext","playAudioHandler","audioPlayingMedia","audioPlayingStatus","audioStatus","unloaded","_loadNewAudio","playing","_pauseAudio","resume","_resumeAudio","Alert","alert","console","log","source","uri","newPlayback","Sound","initialStatus","shouldPlay","rate","shouldCorrectPitch","volume","isMuted","set_audio_playing_media","loadAsync","then","playbackStatus","setIsLoopingAsync","set_audio_player_instance","set_audio_playing_status","JSON","stringify","catch","error","currentPlayback","audioPlayerInstance","pauseAsync","paused","playAsync","_unloadAudio","unloadAsync","downloadStatus","notStarted","downloadMedia","headerAudio","text","onPress","style","cancelable","GetAudioIcon","iconName","headerPlayer"],"mappings":"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","sourcesContent":["import React, { Component, useContext } from \"react\";\r\nimport { View, Text, TouchableOpacity, Alert } from \"react-native\";\r\nimport { Audio } from \"expo-av\";\r\nimport AppContext from \"../utilities/context\";\r\nimport styles from \"../content/css/styles\";\r\nimport { Icon } from \"react-native-elements\";\r\nimport { mp3Folder, GetFileInfo } from \"../utilities/files\";\r\nimport constants from \"../utilities/constants.json\";\r\n\r\nexport default class AudioBtn extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    Audio.setAudioModeAsync({\r\n      allowsRecordingIOS: false,\r\n      interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,\r\n      playsInSilentModeIOS: true,\r\n      shouldDuckAndroid: true,\r\n      interruptionModeAndroid: Audio.INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,\r\n      playThroughEarpieceAndroid: false,\r\n      staysActiveInBackground: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <GetAudioBtn\r\n        media={this.props.media}\r\n        title={this.props.title}\r\n        exist={this.props.exist}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst GetAudioBtn = (props) => {\r\n  const appStateContext = useContext(AppContext);\r\n\r\n  const playAudioHandler = async () => {\r\n    try {\r\n      if (appStateContext.audioPlayingMedia === props.media) {\r\n        //load the audio if it's not yet loaded\r\n        if (\r\n          appStateContext.audioPlayingStatus === constants.audioStatus.unloaded\r\n        ) {\r\n          await _loadNewAudio(props.media);\r\n        }\r\n        //determine the button actio by playback status\r\n        if (\r\n          appStateContext.audioPlayingStatus === constants.audioStatus.playing\r\n        ) {\r\n          await _pauseAudio();\r\n        } else {\r\n          if (\r\n            appStateContext.audioPlayingStatus === constants.audioStatus.resume\r\n          ) {\r\n            await _resumeAudio();\r\n          } else {\r\n            await _loadNewAudio(props.media);\r\n          }\r\n        }\r\n      } else {\r\n        if (\r\n          appStateContext.audioPlayingStatus === constants.audioStatus.playing\r\n        ) {\r\n          Alert.alert(\r\n            \"中断播放\",\r\n            \"正在播放 \" + props.title + \", 是否中断当前播放\"\r\n          );\r\n        } else {\r\n          await _loadNewAudio(props.media);\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n      Alert.alert(\"加载出错\", \"无法加载新音频，请尝试推出当前页面或重启APP\");\r\n    }\r\n  };\r\n  const _loadNewAudio = async (media) => {\r\n    try {\r\n      //loading new sound\r\n      const source = { uri: mp3Folder + media };\r\n      const newPlayback = new Audio.Sound();\r\n      //set loading initial status\r\n      const initialStatus = {\r\n        shouldPlay: true,\r\n        rate: 1.0,\r\n        shouldCorrectPitch: true,\r\n        volume: 1.0,\r\n        isMuted: false,\r\n      };\r\n      appStateContext.set_audio_playing_media(media);\r\n\r\n      await newPlayback\r\n        .loadAsync(source, initialStatus, false)\r\n        .then((playbackStatus) => {\r\n          newPlayback.setIsLoopingAsync(true);\r\n          appStateContext.set_audio_player_instance(newPlayback);\r\n          appStateContext.set_audio_playing_status(\r\n            constants.audioStatus.playing\r\n          ); //since it's a local file and shouldPlay is true, should play the audio immediately instead buffering\r\n          console.log(\"loading finished: \" + JSON.stringify(playbackStatus));\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"loading audio error: \" + error);\r\n          Alert.alert(\"加载出错\", \"无法加载音频，请尝试推出当前页面\");\r\n        });\r\n    } catch (e) {\r\n      console.log(e);\r\n      Alert.alert(\"加载出错\", \"无法加载音频，请尝试推出当前页面\");\r\n    }\r\n  };\r\n  const _pauseAudio = async () => {\r\n    const currentPlayback = appStateContext.audioPlayerInstance;\r\n    try {\r\n      await currentPlayback\r\n        .pauseAsync()\r\n        .then(() => {\r\n          appStateContext.set_audio_player_instance(currentPlayback);\r\n          appStateContext.set_audio_playing_status(\r\n            constants.audioStatus.paused\r\n          );\r\n          console.log(\"paused finished: \");\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"pause audio error: \" + error);\r\n          Alert.alert(\"播放出错\", \"无法暂停音频，请尝试重启\");\r\n        });\r\n    } catch (e) {\r\n      console.log(e);\r\n      Alert.alert(\"播放出错\", \"无法暂停音频，请尝试重启APP\");\r\n    }\r\n  };\r\n  const _resumeAudio = async () => {\r\n    const currentPlayback = appStateContext.audioPlayerInstance;\r\n    try {\r\n      await currentPlayback\r\n        .playAsync()\r\n        .then(() => {\r\n          appStateContext.set_audio_player_instance(currentPlayback);\r\n          appStateContext.set_audio_playing_status(\r\n            constants.audioStatus.playing\r\n          );\r\n          console.log(\"play finished: \");\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"play audio error: \" + error);\r\n          Alert.alert(\"播放出错\", \"无法重新播放音频，请尝试重启\");\r\n        });\r\n    } catch (e) {\r\n      console.log(e);\r\n      Alert.alert(\"播放出错\", \"无法重新播放音频，请尝试重启APP\");\r\n    }\r\n  };\r\n  const _unloadAudio = async () => {\r\n    const currentPlayback = appStateContext.audioPlayerInstance;\r\n    try {\r\n      await currentPlayback\r\n        .unloadAsync()\r\n        .then(() => {\r\n          appStateContext.set_audio_player_instance(currentPlayback);\r\n          appStateContext.set_audio_playing_status(\r\n            constants.audioStatus.unloaded\r\n          );\r\n          console.log(\"unload finished: \");\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"unload audio error: \" + error);\r\n          Alert.alert(\"播放出错\", \"无法终止播放音频，请尝试重启\");\r\n        });\r\n    } catch (e) {\r\n      console.log(e);\r\n      Alert.alert(\"播放出错\", \"无法终止播放音频，请尝试重启APP\");\r\n    }\r\n  };\r\n\r\n  /*\r\n    check this audio media existence, if not, no show\r\n    otherwise, if downloading is currently started, make sure the current download media is not current audio, if matches, no show\r\n    \r\n  */\r\n  if (props.exist === true) {\r\n    if (appStateContext.downloadStatus !== constants.downloadStatus.notStarted && appStateContext.downloadMedia === props.media) {\r\n      return <Text />\r\n    } else {\r\n      return (\r\n        <TouchableOpacity\r\n          style={styles.headerAudio}\r\n          onPress={playAudioHandler}\r\n          onLongPress={() => {\r\n            if (\r\n              appStateContext.audioPlayingStatus === constants.audioStatus.playing ||\r\n              appStateContext.audioPlayingStatus === constants.audioStatus.paused\r\n            ) {\r\n              Alert.alert(\r\n                \"终止播放\",\r\n                \"正在播放音频\" + props.title + \"，是否要终止当前播放？\",\r\n                [\r\n                  {\r\n                    text: \"取消\",\r\n                    onPress: () => console.log(\"Cancel Pressed\"),\r\n                    style: \"cancel\",\r\n                  },\r\n                  {\r\n                    text: \"确认\",\r\n                    onPress: () => _unloadAudio(),\r\n                  },\r\n                ],\r\n                { cancelable: true }\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <GetAudioIcon media={props.media} />\r\n        </TouchableOpacity>\r\n      );\r\n    }\r\n  } else {\r\n    return <Text />;\r\n  }\r\n};\r\n\r\nconst GetAudioIcon = (props) => {\r\n  const appStateContext = useContext(AppContext);\r\n  let iconName = \"play\";\r\n  if (\r\n    appStateContext.audioPlayingMedia === props.media &&\r\n    appStateContext.audioPlayingStatus === constants.audioStatus.playing\r\n  ) {\r\n    iconName = \"pause\";\r\n  }\r\n  return (\r\n    <Icon\r\n      name={iconName}\r\n      type=\"font-awesome\"\r\n      color=\"#ffffff\"\r\n      containerStyle={styles.headerPlayer}\r\n    />\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
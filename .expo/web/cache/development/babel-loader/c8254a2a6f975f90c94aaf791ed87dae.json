{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component } from \"react\";\nimport * as FileSystem from \"expo-file-system\";\nvar mp3Folder = FileSystem.cacheDirectory + \"audio\";\nvar audioUrl = \"https://www.halagame.com/fo/\";\n\nfunction getFileInfo(mp3) {\n  return _regeneratorRuntime.async(function getFileInfo$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(FileSystem.getInfoAsync(mp3Folder + \"/\" + mp3));\n\n        case 3:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\n\nexport var CheckFileExist = function CheckFileExist(mp3) {\n  try {\n    getFileInfo(mp3).then(function (result) {\n      console.log(result.exists);\n      return result.exists;\n    });\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n};\nvar fileName = \"dummy.mp3\";\n\nvar downloadCallback = function downloadCallback(downloadProgress) {\n  var progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;\n  console.log(\"downloading: \" + progress);\n};\n\nvar downloadResumable = FileSystem.createDownloadResumable(\"http://techslides.com/demos/sample-videos/small.mp4\", mp3Folder + \"small.mp4\", {}, downloadCallback);\n\nfunction download() {\n  return _regeneratorRuntime.async(function download$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(downloadResumable.downloadAsync());\n\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\n\nexport var DownloadFile = function DownloadFile(mp3) {\n  fileName = mp3;\n\n  try {\n    download().then(function (result) {\n      if (result.status == 200) {\n        console.log(result.uri);\n      } else {\n        console.log(result.status);\n      }\n    }).catch(console.log('Error when downloading file.'));\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n};","map":{"version":3,"sources":["C:/sites/fo_expo/fo/app/utilities/files.js"],"names":["React","Component","FileSystem","mp3Folder","cacheDirectory","audioUrl","getFileInfo","mp3","getInfoAsync","console","error","CheckFileExist","then","result","log","exists","e","fileName","downloadCallback","downloadProgress","progress","totalBytesWritten","totalBytesExpectedToWrite","downloadResumable","createDownloadResumable","download","downloadAsync","DownloadFile","status","uri","catch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,UAAZ,MAA4B,kBAA5B;AAEA,IAAMC,SAAS,GAAGD,UAAU,CAACE,cAAX,GAA4B,OAA9C;AACA,IAAMC,QAAQ,GAAG,8BAAjB;;AAEA,SAAeC,WAAf,CAA2BC,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEiBL,UAAU,CAACM,YAAX,CAAwBL,SAAS,GAAG,GAAZ,GAAkBI,GAA1C,CAFjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIIE,UAAAA,OAAO,CAACC,KAAR;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACJ,GAAD,EAAS;AACrC,MAAI;AACFD,IAAAA,WAAW,CAACC,GAAD,CAAX,CAAiBK,IAAjB,CAAsB,UAACC,MAAD,EAAY;AAChCJ,MAAAA,OAAO,CAACK,GAAR,CAAYD,MAAM,CAACE,MAAnB;AACA,aAAOF,MAAM,CAACE,MAAd;AACD,KAHD;AAID,GALD,CAKE,OAAOC,CAAP,EAAU;AACVP,IAAAA,OAAO,CAACC,KAAR,CAAcM,CAAd;AACA,WAAO,KAAP;AACD;AACF,CAVM;AAaP,IAAIC,QAAQ,GAAG,WAAf;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,gBAAD,EAAsB;AAC7C,MAAMC,QAAQ,GAAGD,gBAAgB,CAACE,iBAAjB,GAAqCF,gBAAgB,CAACG,yBAAvE;AACAb,EAAAA,OAAO,CAACK,GAAR,CAAY,kBAAkBM,QAA9B;AACD,CAHD;;AAKA,IAAMG,iBAAiB,GAAGrB,UAAU,CAACsB,uBAAX,CACxB,qDADwB,EAExBrB,SAAS,GAAG,WAFY,EAGxB,EAHwB,EAIxBe,gBAJwB,CAA1B;;AAOA,SAAeO,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEiBF,iBAAiB,CAACG,aAAlB,EAFjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIIjB,UAAAA,OAAO,CAACC,KAAR;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,OAAO,IAAMiB,YAAY,GAAG,SAAfA,YAAe,CAACpB,GAAD,EAAS;AACnCU,EAAAA,QAAQ,GAAGV,GAAX;;AACA,MAAI;AACFkB,IAAAA,QAAQ,GAAGb,IAAX,CAAgB,UAACC,MAAD,EAAY;AAC1B,UAAIA,MAAM,CAACe,MAAP,IAAiB,GAArB,EAA0B;AACxBnB,QAAAA,OAAO,CAACK,GAAR,CAAYD,MAAM,CAACgB,GAAnB;AACD,OAFD,MAEO;AACLpB,QAAAA,OAAO,CAACK,GAAR,CAAYD,MAAM,CAACe,MAAnB;AACD;AAEF,KAPD,EAOGE,KAPH,CAQErB,OAAO,CAACK,GAAR,CAAY,8BAAZ,CARF;AAUD,GAXD,CAWE,OAAOE,CAAP,EAAU;AACVP,IAAAA,OAAO,CAACC,KAAR,CAAcM,CAAd;AACA,WAAO,KAAP;AACD;AACF,CAjBM","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as FileSystem from \"expo-file-system\";\r\n\r\nconst mp3Folder = FileSystem.cacheDirectory + \"audio\";\r\nconst audioUrl = \"https://www.halagame.com/fo/\";\r\n\r\nasync function getFileInfo(mp3) {\r\n  try {\r\n    return await FileSystem.getInfoAsync(mp3Folder + \"/\" + mp3);\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\nexport const CheckFileExist = (mp3) => {\r\n  try {\r\n    getFileInfo(mp3).then((result) => {\r\n      console.log(result.exists);\r\n      return result.exists;\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    return false;\r\n  }\r\n};\r\n\r\n/* Download */\r\nlet fileName = \"dummy.mp3\";\r\n\r\nconst downloadCallback = (downloadProgress) => {\r\n  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;\r\n  console.log(\"downloading: \" + progress);\r\n};\r\n\r\nconst downloadResumable = FileSystem.createDownloadResumable(\r\n  \"http://techslides.com/demos/sample-videos/small.mp4\", //remote url\r\n  mp3Folder + \"small.mp4\", //target uri\r\n  {}, //options: md5, header\r\n  downloadCallback //callback progress\r\n);\r\n\r\nasync function download() {\r\n  try {\r\n    return await downloadResumable.downloadAsync();\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n\r\nexport const DownloadFile = (mp3) => {\r\n  fileName = mp3;\r\n  try {\r\n    download().then((result) => {\r\n      if (result.status == 200) {\r\n        console.log(result.uri);\r\n      } else {\r\n        console.log(result.status);\r\n      }\r\n      //console.log(\"downloaded: \" + result.uri + \", \" + result.status);\r\n    }).catch( \r\n      console.log('Error when downloading file.')\r\n    );\r\n  } catch (e) {      \r\n    console.error(e);\r\n    return false;\r\n  }\r\n};\r\n\r\n// class Download {}\r\n\r\n// const fileInfo = new FileInfo();\r\n// export default fileInfo;\r\n"]},"metadata":{},"sourceType":"module"}
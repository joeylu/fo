{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TabBar } from 'react-native-tab-view';\nimport { useTheme } from '@react-navigation/native';\nimport Color from 'color';\nexport default function TabBarTop(props) {\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var state = props.state,\n      navigation = props.navigation,\n      descriptors = props.descriptors,\n      _props$activeTintColo = props.activeTintColor,\n      activeTintColor = _props$activeTintColo === void 0 ? colors.text : _props$activeTintColo,\n      _props$inactiveTintCo = props.inactiveTintColor,\n      inactiveTintColor = _props$inactiveTintCo === void 0 ? Color(activeTintColor).alpha(0.5).rgb().string() : _props$inactiveTintCo,\n      _props$allowFontScali = props.allowFontScaling,\n      allowFontScaling = _props$allowFontScali === void 0 ? true : _props$allowFontScali,\n      _props$showIcon = props.showIcon,\n      showIcon = _props$showIcon === void 0 ? false : _props$showIcon,\n      _props$showLabel = props.showLabel,\n      showLabel = _props$showLabel === void 0 ? true : _props$showLabel,\n      _props$pressColor = props.pressColor,\n      pressColor = _props$pressColor === void 0 ? Color(activeTintColor).alpha(0.08).rgb().string() : _props$pressColor,\n      iconStyle = props.iconStyle,\n      labelStyle = props.labelStyle,\n      indicatorStyle = props.indicatorStyle,\n      style = props.style,\n      rest = _objectWithoutProperties(props, [\"state\", \"navigation\", \"descriptors\", \"activeTintColor\", \"inactiveTintColor\", \"allowFontScaling\", \"showIcon\", \"showLabel\", \"pressColor\", \"iconStyle\", \"labelStyle\", \"indicatorStyle\", \"style\"]);\n\n  return React.createElement(TabBar, _extends({}, rest, {\n    navigationState: state,\n    activeColor: activeTintColor,\n    inactiveColor: inactiveTintColor,\n    indicatorStyle: [{\n      backgroundColor: colors.primary\n    }, indicatorStyle],\n    style: [{\n      backgroundColor: colors.card\n    }, style],\n    pressColor: pressColor,\n    getAccessibilityLabel: function getAccessibilityLabel(_ref) {\n      var route = _ref.route;\n      return descriptors[route.key].options.tabBarAccessibilityLabel;\n    },\n    getTestID: function getTestID(_ref2) {\n      var route = _ref2.route;\n      return descriptors[route.key].options.tabBarTestID;\n    },\n    onTabPress: function onTabPress(_ref3) {\n      var route = _ref3.route,\n          preventDefault = _ref3.preventDefault;\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (event.defaultPrevented) {\n        preventDefault();\n      }\n    },\n    onTabLongPress: function onTabLongPress(_ref4) {\n      var route = _ref4.route;\n      return navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    },\n    renderIcon: function renderIcon(_ref5) {\n      var route = _ref5.route,\n          focused = _ref5.focused,\n          color = _ref5.color;\n\n      if (showIcon === false) {\n        return null;\n      }\n\n      var options = descriptors[route.key].options;\n\n      if (options.tabBarIcon !== undefined) {\n        var icon = options.tabBarIcon({\n          focused: focused,\n          color: color\n        });\n        return React.createElement(View, {\n          style: [styles.icon, iconStyle]\n        }, icon);\n      }\n\n      return null;\n    },\n    renderLabel: function renderLabel(_ref6) {\n      var route = _ref6.route,\n          focused = _ref6.focused,\n          color = _ref6.color;\n\n      if (showLabel === false) {\n        return null;\n      }\n\n      var options = descriptors[route.key].options;\n      var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n\n      if (typeof label === 'string') {\n        return React.createElement(Text, {\n          style: [styles.label, {\n            color: color\n          }, labelStyle],\n          allowFontScaling: allowFontScaling\n        }, label);\n      }\n\n      return label({\n        focused: focused,\n        color: color\n      });\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["MaterialTopTabBar.tsx"],"names":["colors","useTheme","activeTintColor","inactiveTintColor","Color","allowFontScaling","showIcon","showLabel","pressColor","rest","backgroundColor","primary","card","route","descriptors","preventDefault","event","type","target","canPreventDefault","key","color","options","icon","focused","styles","label","height","width","textAlign","textTransform","fontSize","margin"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { TabBar } from 'react-native-tab-view';\nimport { Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\n\nimport type { MaterialTopTabBarProps } from '../types';\n\nexport default function TabBarTop(props: MaterialTopTabBarProps) {\n  const { colors } = useTheme();\n\n  const {\n    state,\n    navigation,\n    descriptors,\n    activeTintColor = colors.text,\n    inactiveTintColor = Color(activeTintColor).alpha(0.5).rgb().string(),\n    allowFontScaling = true,\n    showIcon = false,\n    showLabel = true,\n    pressColor = Color(activeTintColor).alpha(0.08).rgb().string(),\n    iconStyle,\n    labelStyle,\n    indicatorStyle,\n    style,\n    ...rest\n  } = props;\n\n  return (\n    <TabBar\n      {...rest}\n      navigationState={state}\n      activeColor={activeTintColor}\n      inactiveColor={inactiveTintColor}\n      indicatorStyle={[{ backgroundColor: colors.primary }, indicatorStyle]}\n      style={[{ backgroundColor: colors.card }, style]}\n      pressColor={pressColor}\n      getAccessibilityLabel={({ route }) =>\n        descriptors[route.key].options.tabBarAccessibilityLabel\n      }\n      getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\n      onTabPress={({ route, preventDefault }) => {\n        const event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true,\n        });\n\n        if (event.defaultPrevented) {\n          preventDefault();\n        }\n      }}\n      onTabLongPress={({ route }) =>\n        navigation.emit({\n          type: 'tabLongPress',\n          target: route.key,\n        })\n      }\n      renderIcon={({ route, focused, color }) => {\n        if (showIcon === false) {\n          return null;\n        }\n\n        const { options } = descriptors[route.key];\n\n        if (options.tabBarIcon !== undefined) {\n          const icon = options.tabBarIcon({ focused, color });\n\n          return <View style={[styles.icon, iconStyle]}>{icon}</View>;\n        }\n\n        return null;\n      }}\n      renderLabel={({ route, focused, color }) => {\n        if (showLabel === false) {\n          return null;\n        }\n\n        const { options } = descriptors[route.key];\n        const label =\n          options.tabBarLabel !== undefined\n            ? options.tabBarLabel\n            : options.title !== undefined\n            ? options.title\n            : (route as Route<string>).name;\n\n        if (typeof label === 'string') {\n          return (\n            <Text\n              style={[styles.label, { color }, labelStyle]}\n              allowFontScaling={allowFontScaling}\n            >\n              {label}\n            </Text>\n          );\n        }\n\n        return label({ focused, color });\n      }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
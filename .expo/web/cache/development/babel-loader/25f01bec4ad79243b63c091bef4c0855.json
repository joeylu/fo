{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\sites\\\\fo_expo\\\\fo\\\\app\\\\layout\\\\tabbar.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-reanimated\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport foData from \"../content/data.json\";\nimport foMenu from \"../content/menu.json\";\nimport ErrorScreen from \"../error/error\";\nimport ContentScreen from \"./content\";\nvar Tab = createMaterialTopTabNavigator();\n\nvar TabBar = function (_Component) {\n  _inherits(TabBar, _Component);\n\n  var _super = _createSuper(TabBar);\n\n  function TabBar() {\n    _classCallCheck(this, TabBar);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TabBar, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Tab.Navigator, {\n        tabBar: function tabBar(props) {\n          return React.createElement(BookSection, _extends({}, props, {\n            source: foMenu,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 16,\n              columnNumber: 28\n            }\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 7\n        }\n      }, React.createElement(Tab.Screen, {\n        name: \"Content\",\n        options: {\n          title: 'My home'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 9\n        }\n      }, function (props) {\n        return React.createElement(ContentScreen, _extends({}, props, {\n          source: foMenu,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 21\n          }\n        }));\n      }), React.createElement(Tab.Screen, {\n        name: \"Error\",\n        component: ErrorScreen,\n        options: {\n          title: 'Another Page'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return TabBar;\n}(Component);\n\nexport { TabBar as default };\n\nfunction SectionTabs(isMenu) {\n  var screens = {};\n\n  if (isMenu) {\n    data.map(function (scr, i) {\n      screens[i] = {\n        screen: function screen(props) {\n          return React.createElement(SectionPage, {\n            data: scr,\n            navigation: navigation,\n            bookID: bookID,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 26\n            }\n          });\n        },\n        navigationOptions: {\n          tabBarLabel: scr.title.length > 6 ? scr.title.substr(0, 5).concat('..') : scr.title\n        }\n      };\n    });\n  } else {}\n\n  return screens;\n}\n\nfunction BookSection(_ref) {\n  var state = _ref.state,\n      descriptors = _ref.descriptors,\n      navigation = _ref.navigation,\n      position = _ref.position;\n  return React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      padding: 20,\n      backgroundColor: \"#b32400\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, state.routes.map(function (route, index) {\n    var options = descriptors[route.key].options;\n    var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    var isFocused = state.index === index;\n\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: \"tabPress\",\n        target: route.key\n      });\n\n      if (!isFocused && !event.defaultPrevented) {\n        console.log();\n        navigation.navigate(route.name);\n      }\n    };\n\n    var onLongPress = function onLongPress() {\n      navigation.emit({\n        type: \"tabLongPress\",\n        target: route.key\n      });\n    };\n\n    var inputRange = state.routes.map(function (_, i) {\n      return i;\n    });\n    var opacity = Animated.interpolate(position, {\n      inputRange: inputRange,\n      outputRange: inputRange.map(function (i) {\n        return i === index ? 1 : 0.5;\n      })\n    });\n    return React.createElement(TouchableOpacity, {\n      accessibilityRole: \"button\",\n      accessibilityStates: isFocused ? [\"selected\"] : [],\n      accessibilityLabel: options.tabBarAccessibilityLabel,\n      testID: options.tabBarTestID,\n      onPress: onPress,\n      onLongPress: onLongPress,\n      style: {\n        flex: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, React.createElement(Animated.Text, {\n      style: {\n        opacity: opacity,\n        color: \"#ffffff\",\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, label));\n  }));\n}","map":{"version":3,"sources":["C:/sites/fo_expo/fo/app/layout/tabbar.js"],"names":["React","Component","Animated","createMaterialTopTabNavigator","foData","foMenu","ErrorScreen","ContentScreen","Tab","TabBar","props","title","SectionTabs","isMenu","screens","data","map","scr","i","screen","navigation","bookID","navigationOptions","tabBarLabel","length","substr","concat","BookSection","state","descriptors","position","flexDirection","padding","backgroundColor","routes","route","index","options","key","label","undefined","name","isFocused","onPress","event","emit","type","target","defaultPrevented","console","log","navigate","onLongPress","inputRange","_","opacity","interpolate","outputRange","tabBarAccessibilityLabel","tabBarTestID","flex","color","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { View, TouchableOpacity, Text, StyleSheet } from \"react-native\";\r\nimport Animated from \"react-native-reanimated\";\r\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\r\nimport foData from \"../content/data.json\";\r\nimport foMenu from \"../content/menu.json\";\r\n\r\nimport ErrorScreen from \"../error/error\";\r\nimport ContentScreen from \"./content\";\r\n\r\nconst Tab = createMaterialTopTabNavigator();\r\nexport default class TabBar extends Component {\r\n  render() {\r\n    return (\r\n      <Tab.Navigator\r\n        tabBar={(props) => <BookSection {...props} source={foMenu} />}\r\n      >\r\n        <Tab.Screen name=\"Content\" options={{ title: 'My home' }}>\r\n          {props => <ContentScreen {...props} source={foMenu} />}\r\n        </Tab.Screen>\r\n        <Tab.Screen name=\"Error\" component={ErrorScreen} options={{ title: 'Another Page' }}  />\r\n      </Tab.Navigator>\r\n    );\r\n  }\r\n}\r\n\r\nfunction SectionTabs(isMenu) {  \r\n  var screens = {};\r\n  if (isMenu) { //load menu to the tab\r\n    data.map((scr,i) => {    \r\n      screens[i] = {\r\n        screen: props => <SectionPage data={scr} navigation={navigation} bookID = {bookID} />,\r\n        navigationOptions: {\r\n          tabBarLabel: scr.title.length>6 ? scr.title.substr(0, 5).concat('..') : scr.title, \r\n          //tabBarIcon: ({ tintColor }) => <Icon name=\"list\" size={35} color={tintColor} />\r\n        }\r\n      }\r\n    });\r\n  } else { //load dynamic content\r\n    // screens[0] = {\r\n    //   screen: props => <ErrorPage msg=\"No data record found\" />,\r\n    //   navigationOptions: {\r\n    //     tabBarLabel: \"Fatal error occurred\"\r\n    //   }\r\n    // }\r\n  }\r\n  return screens;  \r\n}\r\n\r\nfunction BookSection({ state, descriptors, navigation, position }) {\r\n  return (\r\n    <View style={{ flexDirection: \"row\", padding: 20, backgroundColor: \"#b32400\" }}>\r\n      {state.routes.map((route, index) => {\r\n        const { options } = descriptors[route.key];\r\n        const label =\r\n          options.tabBarLabel !== undefined\r\n            ? options.tabBarLabel\r\n            : options.title !== undefined\r\n            ? options.title\r\n            : route.name;\r\n\r\n        const isFocused = state.index === index;\r\n\r\n        const onPress = () => {\r\n          const event = navigation.emit({\r\n            type: \"tabPress\",\r\n            target: route.key,\r\n          });\r\n\r\n          if (!isFocused && !event.defaultPrevented) {\r\n            console.log();\r\n            navigation.navigate(route.name);\r\n          }\r\n        };\r\n\r\n        const onLongPress = () => {\r\n          navigation.emit({\r\n            type: \"tabLongPress\",\r\n            target: route.key,\r\n          });\r\n        };\r\n        // modify inputRange for custom behavior\r\n        const inputRange = state.routes.map((_, i) => i);\r\n        const opacity = Animated.interpolate(position, {\r\n          inputRange,\r\n          outputRange: inputRange.map((i) => (i === index ? 1 : 0.5)),\r\n        });\r\n\r\n        return (\r\n          <TouchableOpacity\r\n            accessibilityRole=\"button\"\r\n            accessibilityStates={isFocused ? [\"selected\"] : []}\r\n            accessibilityLabel={options.tabBarAccessibilityLabel}\r\n            testID={options.tabBarTestID}\r\n            onPress={onPress}\r\n            onLongPress={onLongPress}\r\n            style={{ flex: 1 }}            \r\n          >\r\n            <Animated.Text style={{ opacity, color: \"#ffffff\", textAlign: \"center\" }}>{label}</Animated.Text>\r\n          </TouchableOpacity>\r\n        );\r\n      })}\r\n    </View>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
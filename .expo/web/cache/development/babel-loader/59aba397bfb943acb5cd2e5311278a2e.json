{"ast":null,"code":"'use strict';\n\nvar AssetRegistry = require(\"./AssetRegistry\");\n\nvar AssetSourceResolver = require(\"./AssetSourceResolver\");\n\nvar _customSourceTransformer, _serverURL, _scriptURL;\n\nvar _sourceCodeScriptURL;\n\nfunction getSourceCodeScriptURL() {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;\n\n  if (!sourceCode) {\n    sourceCode = require(\"../NativeModules/specs/NativeSourceCode\").default;\n  }\n\n  _sourceCodeScriptURL = sourceCode.getConstants().scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL() {\n  if (_serverURL === undefined) {\n    var sourceCodeScriptURL = getSourceCodeScriptURL();\n    var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n\n    if (match) {\n      _serverURL = match[0];\n    } else {\n      _serverURL = null;\n    }\n  }\n\n  return _serverURL;\n}\n\nfunction _coerceLocalScriptURL(scriptURL) {\n  if (scriptURL) {\n    if (scriptURL.startsWith('assets://')) {\n      return null;\n    }\n\n    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);\n\n    if (!scriptURL.includes('://')) {\n      scriptURL = 'file://' + scriptURL;\n    }\n  }\n\n  return scriptURL;\n}\n\nfunction getScriptURL() {\n  if (_scriptURL === undefined) {\n    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());\n  }\n\n  return _scriptURL;\n}\n\nfunction setCustomSourceTransformer(transformer) {\n  _customSourceTransformer = transformer;\n}\n\nfunction resolveAssetSource(source) {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  var asset = AssetRegistry.getAssetByID(source);\n\n  if (!asset) {\n    return null;\n  }\n\n  var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);\n\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n\n  return resolver.defaultAsset();\n}\n\nmodule.exports = resolveAssetSource;\nmodule.exports.pickScale = AssetSourceResolver.pickScale;\nmodule.exports.setCustomSourceTransformer = setCustomSourceTransformer;","map":{"version":3,"sources":["C:/sites/fo-github/node_modules/react-native/Libraries/Image/resolveAssetSource.js"],"names":["AssetRegistry","require","AssetSourceResolver","_customSourceTransformer","_serverURL","_scriptURL","_sourceCodeScriptURL","getSourceCodeScriptURL","sourceCode","global","nativeExtensions","SourceCode","default","getConstants","scriptURL","getDevServerURL","undefined","sourceCodeScriptURL","match","_coerceLocalScriptURL","startsWith","substring","lastIndexOf","includes","getScriptURL","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","getAssetByID","resolver","defaultAsset","module","exports","pickScale"],"mappings":"AAYA;;AAEA,IAAMA,aAAa,GAAGC,OAAO,mBAA7B;;AACA,IAAMC,mBAAmB,GAAGD,OAAO,yBAAnC;;AAIA,IAAIE,wBAAJ,EAA8BC,UAA9B,EAA0CC,UAA1C;;AAEA,IAAIC,oBAAJ;;AACA,SAASC,sBAAT,GAA2C;AACzC,MAAID,oBAAJ,EAA0B;AACxB,WAAOA,oBAAP;AACD;;AAED,MAAIE,UAAU,GACZC,MAAM,CAACC,gBAAP,IAA2BD,MAAM,CAACC,gBAAP,CAAwBC,UADrD;;AAEA,MAAI,CAACH,UAAL,EAAiB;AACfA,IAAAA,UAAU,GAAGP,OAAO,2CAAP,CAAmDW,OAAhE;AACD;;AACDN,EAAAA,oBAAoB,GAAGE,UAAU,CAACK,YAAX,GAA0BC,SAAjD;AACA,SAAOR,oBAAP;AACD;;AAED,SAASS,eAAT,GAAoC;AAClC,MAAIX,UAAU,KAAKY,SAAnB,EAA8B;AAC5B,QAAMC,mBAAmB,GAAGV,sBAAsB,EAAlD;AACA,QAAMW,KAAK,GACTD,mBAAmB,IAAIA,mBAAmB,CAACC,KAApB,CAA0B,mBAA1B,CADzB;;AAEA,QAAIA,KAAJ,EAAW;AAETd,MAAAA,UAAU,GAAGc,KAAK,CAAC,CAAD,CAAlB;AACD,KAHD,MAGO;AAELd,MAAAA,UAAU,GAAG,IAAb;AACD;AACF;;AACD,SAAOA,UAAP;AACD;;AAED,SAASe,qBAAT,CAA+BL,SAA/B,EAA4D;AAC1D,MAAIA,SAAJ,EAAe;AACb,QAAIA,SAAS,CAACM,UAAV,CAAqB,WAArB,CAAJ,EAAuC;AAErC,aAAO,IAAP;AACD;;AACDN,IAAAA,SAAS,GAAGA,SAAS,CAACO,SAAV,CAAoB,CAApB,EAAuBP,SAAS,CAACQ,WAAV,CAAsB,GAAtB,IAA6B,CAApD,CAAZ;;AACA,QAAI,CAACR,SAAS,CAACS,QAAV,CAAmB,KAAnB,CAAL,EAAgC;AAG9BT,MAAAA,SAAS,GAAG,YAAYA,SAAxB;AACD;AACF;;AACD,SAAOA,SAAP;AACD;;AAED,SAASU,YAAT,GAAiC;AAC/B,MAAInB,UAAU,KAAKW,SAAnB,EAA8B;AAC5BX,IAAAA,UAAU,GAAGc,qBAAqB,CAACZ,sBAAsB,EAAvB,CAAlC;AACD;;AACD,SAAOF,UAAP;AACD;;AAED,SAASoB,0BAAT,CACEC,WADF,EAEQ;AACNvB,EAAAA,wBAAwB,GAAGuB,WAA3B;AACD;;AAMD,SAASC,kBAAT,CAA4BC,MAA5B,EAA+D;AAC7D,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAOA,MAAP;AACD;;AAED,MAAMC,KAAK,GAAG7B,aAAa,CAAC8B,YAAd,CAA2BF,MAA3B,CAAd;;AACA,MAAI,CAACC,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AAED,MAAME,QAAQ,GAAG,IAAI7B,mBAAJ,CACfa,eAAe,EADA,EAEfS,YAAY,EAFG,EAGfK,KAHe,CAAjB;;AAKA,MAAI1B,wBAAJ,EAA8B;AAC5B,WAAOA,wBAAwB,CAAC4B,QAAD,CAA/B;AACD;;AACD,SAAOA,QAAQ,CAACC,YAAT,EAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBP,kBAAjB;AACAM,MAAM,CAACC,OAAP,CAAeC,SAAf,GAA2BjC,mBAAmB,CAACiC,SAA/C;AACAF,MAAM,CAACC,OAAP,CAAeT,0BAAf,GAA4CA,0BAA5C","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n// Resolves an asset into a `source` for `Image`.\n\n'use strict';\n\nconst AssetRegistry = require('./AssetRegistry');\nconst AssetSourceResolver = require('./AssetSourceResolver');\n\nimport type {ResolvedAssetSource} from './AssetSourceResolver';\n\nlet _customSourceTransformer, _serverURL, _scriptURL;\n\nlet _sourceCodeScriptURL: ?string;\nfunction getSourceCodeScriptURL(): ?string {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  let sourceCode =\n    global.nativeExtensions && global.nativeExtensions.SourceCode;\n  if (!sourceCode) {\n    sourceCode = require('../NativeModules/specs/NativeSourceCode').default;\n  }\n  _sourceCodeScriptURL = sourceCode.getConstants().scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL(): ?string {\n  if (_serverURL === undefined) {\n    const sourceCodeScriptURL = getSourceCodeScriptURL();\n    const match =\n      sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nfunction _coerceLocalScriptURL(scriptURL: ?string): ?string {\n  if (scriptURL) {\n    if (scriptURL.startsWith('assets://')) {\n      // android: running from within assets, no offline path to use\n      return null;\n    }\n    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);\n    if (!scriptURL.includes('://')) {\n      // Add file protocol in case we have an absolute file path and not a URL.\n      // This shouldn't really be necessary. scriptURL should be a URL.\n      scriptURL = 'file://' + scriptURL;\n    }\n  }\n  return scriptURL;\n}\n\nfunction getScriptURL(): ?string {\n  if (_scriptURL === undefined) {\n    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());\n  }\n  return _scriptURL;\n}\n\nfunction setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource,\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nfunction resolveAssetSource(source: any): ?ResolvedAssetSource {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = AssetRegistry.getAssetByID(source);\n  if (!asset) {\n    return null;\n  }\n\n  const resolver = new AssetSourceResolver(\n    getDevServerURL(),\n    getScriptURL(),\n    asset,\n  );\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nmodule.exports = resolveAssetSource;\nmodule.exports.pickScale = AssetSourceResolver.pickScale;\nmodule.exports.setCustomSourceTransformer = setCustomSourceTransformer;\n"]},"metadata":{},"sourceType":"script"}
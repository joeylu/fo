{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\sites\\\\fo_expo\\\\fo\\\\app\\\\book\\\\options.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Popover, { PopoverTouchable } from 'react-native-modal-popover';\nimport { List, ListItem } from 'react-native-elements';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport foData from \"../content/data.json\";\n\nfunction initNewSound() {\n  if (global.preload.sound == null) {\n    global.preload.sound = new Sound(global.preload.media, dirs.MusicDir + \"/fo\", function (error) {\n      if (error) {\n        console.log('failed to load the sound', error);\n        return;\n      }\n\n      console.log('duration in seconds: ' + global.preload.sound.getDuration() + 'number of channels: ' + global.preload.sound.getNumberOfChannels());\n    });\n  }\n}\n\nvar OptionsPopover = function (_Component) {\n  _inherits(OptionsPopover, _Component);\n\n  var _super = _createSuper(OptionsPopover);\n\n  function OptionsPopover(props) {\n    var _this;\n\n    _classCallCheck(this, OptionsPopover);\n\n    _this = _super.call(this, props);\n    global.preload = {\n      status: 3,\n      media: \"\",\n      download: 0,\n      progress: 0,\n      sound: null,\n      frame: 0,\n      intervalID: 0\n    };\n\n    if (global.song.media != _this.props.media) {\n      global.preload.media = _this.props.media;\n    } else {\n      global.preload = global.song;\n    }\n\n    _this.state = {\n      sound: global.preload\n    };\n    _this.updateSong = _this.setSoundState.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(OptionsPopover, [{\n    key: \"doFileCheck\",\n    value: function doFileCheck() {\n      var fileName = global.preload.media;\n    }\n  }, {\n    key: \"setSoundState\",\n    value: function setSoundState(songInfo) {\n      this.setState({\n        sound: songInfo\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var OptionList = function OptionList() {\n        if (_this2.state.sound.media) {\n          return React.createElement(List, {\n            containerStyle: {\n              marginBottom: 20\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 11\n            }\n          }, React.createElement(ListItem, {\n            key: 99,\n            hideChevron: true,\n            titleStyle: {\n              color: '#ccc'\n            },\n            title: \"\\u8BBE\\u7F6E\",\n            leftIcon: React.createElement(Icon, {\n              name: \"cog\",\n              style: styles.iconsDisabled,\n              size: 20,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 25\n              }\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 13\n            }\n          }));\n        } else {\n          return React.createElement(List, {\n            containerStyle: {\n              marginBottom: 20\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 11\n            }\n          }, React.createElement(ListItem, {\n            key: 99,\n            hideChevron: true,\n            titleStyle: {\n              color: '#ccc'\n            },\n            title: \"\\u8BBE\\u7F6E\",\n            leftIcon: React.createElement(Icon, {\n              name: \"cog\",\n              style: styles.iconsDisabled,\n              size: 20,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 25\n              }\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 13\n            }\n          }));\n        }\n      };\n\n      return React.createElement(PopoverTouchable, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 7\n        }\n      }, React.createElement(Icon.Button, {\n        name: \"bars\",\n        backgroundColor: \"transparent\",\n        color: \"#1a1a1a\",\n        size: 30,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 9\n        }\n      }), React.createElement(Popover, {\n        contentStyle: styles.content,\n        arrowStyle: styles.arrow,\n        backgroundStyle: styles.background,\n        placement: \"bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 9\n        }\n      }, React.createElement(OptionList, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n\n  return OptionsPopover;\n}(Component);\n\nexport { OptionsPopover as default };\nvar styles = StyleSheet.create({\n  content: {\n    padding: 16,\n    backgroundColor: '#fcfcfc',\n    borderRadius: 8\n  },\n  arrow: {\n    borderTopColor: '#fcfcfc'\n  },\n  icons: {\n    marginRight: 15\n  },\n  iconsDisabled: {\n    marginRight: 15,\n    color: '#ccc'\n  }\n});","map":{"version":3,"sources":["C:/sites/fo_expo/fo/app/book/options.js"],"names":["React","Component","Popover","PopoverTouchable","List","ListItem","Icon","foData","initNewSound","global","preload","sound","Sound","media","dirs","MusicDir","error","console","log","getDuration","getNumberOfChannels","OptionsPopover","props","status","download","progress","frame","intervalID","song","state","updateSong","setSoundState","bind","fileName","songInfo","setState","OptionList","marginBottom","color","styles","iconsDisabled","content","arrow","background","StyleSheet","create","padding","backgroundColor","borderRadius","borderTopColor","icons","marginRight"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, StyleSheet, Text, View, ActivityIndicator } from 'react-native';\r\nimport Popover, { PopoverTouchable } from 'react-native-modal-popover';\r\nimport { List, ListItem } from 'react-native-elements';\r\nimport Icon from 'react-native-vector-icons/FontAwesome';\r\nimport foData from '../content/data.json';\r\n//init directory\r\n//const dirs = RNFetchBlob.fs.dirs;\r\n// Enable playback in silence mode\r\n//Sound.setCategory('Playback');\r\n//init react native sound\r\nfunction initNewSound(){\r\n  //console.log(JSON.stringify(song));\r\n  if (global.preload.sound == null) {    \r\n    global.preload.sound = new Sound(global.preload.media, dirs.MusicDir + \"/fo\", (error) => {\r\n      if (error) {\r\n        console.log('failed to load the sound', error);\r\n        return;\r\n      }\r\n      // loaded successfully\r\n      // Loop indefinitely until stop() is called\r\n      //sound.setNumberOfLoops(-1);\r\n      console.log('duration in seconds: ' + global.preload.sound.getDuration() + 'number of channels: ' + global.preload.sound.getNumberOfChannels());\r\n    });\r\n  }\r\n}\r\n\r\n// class IconPlayer extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {sound: props.songInfo};\r\n//     if (global.song.media != props.songInfo.media) {\r\n//       initNewSound();\r\n//     }\r\n//   }\r\n//   playNewSound() { //when new play is pressed\r\n//     //console.log(global.preload.sound.isLoaded());\r\n//     if (global.preload.sound.isLoaded()) { //make sure the new sound is initiated\r\n//       global.song = global.preload;\r\n//       global.song.status = 1;\r\n//       this.props.songHandler(global.song);\r\n//       this.updateFrame();\r\n//       global.song.sound.play((success) => {\r\n//         if (success) {\r\n//           //something when finish playing\r\n//         } else {\r\n//           alert('无法加载音乐，请尝试重新下载: (1000)');\r\n//           global.song.sound.release();\r\n//         }\r\n//       }); \r\n//     } else {\r\n//       alert('无法加载音乐，请尝试重新下载: (10)');\r\n//     }\r\n//   }\r\n//   pauseSong(){\r\n//     global.song.status = 2;\r\n//     global.song.sound.pause();\r\n//     this.props.songHandler(global.song);\r\n//     this.updateFrame();\r\n//   }\r\n//   resumeSong(){\r\n//     global.song.status = 1;\r\n//     global.song.sound.play(); //resume() is not there yet\r\n//     this.props.songHandler(global.song);\r\n//     this.updateFrame();\r\n//   }\r\n//   stopSong(){\r\n//     global.song.sound.stop(() => {\r\n//       global.song.sound.release();\r\n//     });\r\n//     global.song.status = 0;\r\n//     this.props.songHandler(global.song);\r\n//   }\r\n//   updateFrame(){\r\n//     clearInterval(global.song.intervalID);    \r\n//     global.song.intervalID = setInterval(()=>{\r\n//       let time = new Date();\r\n//       console.log(time.getHours() + \":\" + time.getMinutes() + \":\" + time.getSeconds() + \" -- \" + song.intervalID);      \r\n//       if (global.song.status == 1 && global.song.sound.isLoaded()){\r\n//         global.song.sound.getCurrentTime((second)=> { \r\n//           let playbackFrame = parseInt((second / global.song.sound.getDuration()) * 100);\r\n//           if (playbackFrame > global.song.frame) {\r\n//             global.song.frame = playbackFrame;\r\n//             this.props.songHandler(global.song);\r\n//             console.log(second + \" // \" + global.song.frame);\r\n//           }\r\n//         });\r\n//       }    \r\n//       if(global.song.frame > 100 || global.song.status != 1 || !global.song.sound.isLoaded()) {\r\n//         clearInterval(global.song.intervalID);\r\n//       }\r\n//     }, 1000)\r\n//   }\r\n//   render() {\r\n//     if (this.state.sound.status == 3) {    \r\n//       return (\r\n//         <ListItem key={0} hideChevron={true} title=\"尚未缓存\"\r\n//           leftIcon={<Icon name=\"exclamation-triangle\" style={styles.icons} size={20} ></Icon>} />\r\n//       )  \r\n//     } else if (this.state.sound.status == 2) {    \r\n//       return (\r\n//         <ListItem key={0} hideChevron={true} title=\"继续播放\" onPress={() => {return this.playSound();}}\r\n//           leftIcon={<Icon name=\"play-circle-o\" style={styles.icons} size={20} ></Icon>} />\r\n//       )  \r\n//     } else if (this.state.sound.status == 1) {    \r\n//       return (\r\n//         <ListItem key={0} hideChevron={true} title=\"暂停播放\" onPress={() => {return this.pauseSong();}}\r\n//           leftIcon={<Icon name=\"pause\" style={styles.icons} size={20} ></Icon>}          \r\n//           title={\r\n//             <View style={{flex: 1, height:20, position: 'relative'}}>\r\n//               <Text style={{position: 'relative', zIndex:2}}>暂停播放</Text>\r\n//               <View style={{width: this.state.sound.frame.toString() + '%', height:\"100%\", backgroundColor:'#ddd', position: 'absolute',zIndex:1}}></View>\r\n//             </View>\r\n//           } />\r\n//       )\r\n//     } else {            \r\n//       return (              \r\n//         <ListItem key={0} hideChevron={true} title=\"播放音乐\" onPress={() => {return this.playNewSound();}}\r\n//           leftIcon={<Icon name=\"play\" style={styles.icons} size={20} ></Icon>} />\r\n//       )\r\n//     }\r\n//   }\r\n// }\r\n// class Download extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {sound: props.downloadInfo};    \r\n//   }\r\n//   downloadSound(){\r\n//     global.preload.status = 3, global.preload.download = 0; global.preload.sound = null;\r\n//     this.props.fileHandler(global.preload);\r\n//     RNFetchBlob.config({\r\n//       path : dirs.MusicDir + '/fo/' + global.preload.media\r\n//     }).fetch('GET', 'http://www.halagame.com/fo/' + global.preload.media, {\r\n//       //some headers ..    \r\n//     }).progress({ count : 10 }, (received, total) => {\r\n//       let progressingValue = parseInt((received / total) * 100);\r\n//       global.preload.download = 1; global.preload.progress = progressingValue;\r\n//       this.props.fileHandler(global.preload);\r\n//       //console.log('progress', progressingValue)    \r\n//     }).then((res) => {    \r\n//       global.preload.status = 0; global.preload.download = 2; global.preload.progress = 100;       \r\n//       initSound(); //set song.sound\r\n//       this.props.fileHandler(global.preload);\r\n//       //console.log('downloaded: ' + JSON.stringify(res));\r\n//     }).catch((errorMessage, statusCode)=>{     \r\n//       global.preload.status = 3; global.preload.download = 0; global.preload.progress = 0;\r\n//       this.props.fileHandler(global.preload);\r\n//       //console.log('failed: ' + errorMessage);\r\n//     })\r\n//   }\r\n//   render() {\r\n//     if (this.state.sound.download == 2) {\r\n//       return (                \r\n//         <ListItem key={1} hideChevron={true} onPress={() => {return this.downloadSound();}} title=\"重新下载\" \r\n//           leftIcon={<Icon name=\"check\" style={styles.icons} size={20} ></Icon>} />\r\n//       )\r\n//     } else if (this.state.sound.download == 1) {\r\n//       return (               \r\n//         <ListItem key={1} hideChevron={true} \r\n//           leftIcon={ <Icon name=\"spinner\" style={styles.icons} size={20} ></Icon> }\r\n//           title={\r\n//             <View style={{flex: 1, height:20, position: 'relative'}}>\r\n//               <Text style={{position: 'relative', zIndex:2}}>下载中..</Text>\r\n//               <View width style={{width: this.state.sound.progress.toString() + '%', height:\"100%\", backgroundColor:'#ddd', position: 'absolute',zIndex:1}}></View>\r\n//             </View>\r\n//           }\r\n//         />\r\n//       )\r\n//     } else {\r\n//       return (\r\n//         <ListItem key={1} hideChevron={true} onPress={() => {return this.downloadSound();}} title=\"缓存音乐\"\r\n//           leftIcon={<Icon name=\"download\" style={styles.icons} size={20} ></Icon>} />\r\n//       )\r\n//     }\r\n//   }  \r\n// }\r\n\r\nexport default class OptionsPopover extends Component {  \r\n  constructor(props) {\r\n    super(props);    \r\n    global.preload = {status: 3, media: \"\", download: 0, progress: 0, sound: null, frame: 0, intervalID: 0}; //always reset preload\r\n    if (global.song.media != this.props.media) { //when new book is opened, create a new preload media file\r\n      global.preload.media = this.props.media;\r\n    } else { //when same book or both has no media, use global song\r\n      global.preload = global.song;\r\n    }\r\n    this.state = {sound:global.preload};\r\n    this.updateSong = this.setSoundState.bind(this);\r\n    //console.log(JSON.stringify(this.state.sound));\r\n  }    \r\n  doFileCheck() {  \r\n    let fileName = global.preload.media;\r\n    // RNFetchBlob.fs.exists(dirs.MusicDir + \"/fo/\" + fileName).then((exist) => {\r\n    //   //console.log(\"file is: \" + exist + \" -- status: \" + global.preload.status);\r\n    //   if (exist && global.preload.status != 1) { //has file, set to default playable\r\n    //     global.preload = {status: 0, media: fileName, download: 2, progress: 100, frame: 0,intervalID: 0 };\r\n    //     this.setSoundState(global.preload);\r\n    //   } else if (!exist) { //no file, set to default downloadable\r\n    //     global.preload = {status: 3, media: fileName, download: 0, progress: 0, frame: 0,intervalID: 0 };\r\n    //     this.setSoundState(global.preload);\r\n    //   }\r\n    // }).catch(() => { \r\n    //   //log error\r\n    // })\r\n  }\r\n  setSoundState(songInfo) { \r\n    this.setState({ sound: songInfo });\r\n  }\r\n  componentDidMount() {\r\n    //console.log(\"start checking\");\r\n    //this.doFileCheck();\r\n  }\r\n  render(){           \r\n    const OptionList = ()=>{\r\n      if (this.state.sound.media) {        \r\n        return (\r\n          <List containerStyle={{marginBottom: 20}}>          \r\n            {/* <IconPlayer songInfo={this.state.sound} songHandler = {this.updateSong.bind(this)} />            \r\n            <Download downloadInfo={this.state.sound} fileHandler = {this.updateSong.bind(this)} /> */}\r\n            <ListItem key={99} hideChevron={true} titleStyle={{color: '#ccc'}} title=\"设置\" \r\n              leftIcon={<Icon name=\"cog\" style={styles.iconsDisabled} size={20} ></Icon>} />\r\n          </List>\r\n        )\r\n      } else {           \r\n        return (\r\n          <List containerStyle={{marginBottom: 20}}>          \r\n            <ListItem key={99} hideChevron={true} titleStyle={{color: '#ccc'}} title=\"设置\" \r\n              leftIcon={<Icon name=\"cog\" style={styles.iconsDisabled} size={20} ></Icon>} />\r\n          </List>\r\n        )     \r\n      }\r\n    }\r\n    return (    \r\n      <PopoverTouchable>\r\n        <Icon.Button name=\"bars\" backgroundColor=\"transparent\" color=\"#1a1a1a\" size={30} />\r\n        <Popover\r\n          contentStyle={styles.content}\r\n          arrowStyle={styles.arrow}\r\n          backgroundStyle={styles.background}\r\n          placement = \"bottom\"\r\n        >\r\n          {\r\n            <OptionList />\r\n          }\r\n        </Popover>\r\n      </PopoverTouchable>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  content: {\r\n    padding: 16,\r\n    backgroundColor: '#fcfcfc',\r\n    borderRadius: 8,\r\n  },\r\n  arrow: {\r\n    borderTopColor: '#fcfcfc',\r\n  },\r\n  icons: {\r\n    marginRight: 15\r\n  },\r\n  iconsDisabled: {\r\n    marginRight: 15,\r\n    color: '#ccc'\r\n  }\r\n});\r\n\r\n"]},"metadata":{},"sourceType":"module"}
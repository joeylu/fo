{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar EventEmitter = require(\"../vendor/emitter/EventEmitter\");\n\nvar EventSubscriptionVendor = require(\"../vendor/emitter/EventSubscriptionVendor\");\n\nfunction checkNativeEventModule(eventType) {\n  if (eventType) {\n    if (eventType.lastIndexOf('statusBar', 0) === 0) {\n      throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');\n    }\n\n    if (eventType.lastIndexOf('keyboard', 0) === 0) {\n      throw new Error('`' + eventType + '` event should be registered via the Keyboard module');\n    }\n\n    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {\n      throw new Error('`' + eventType + '` event should be registered via the AppState module');\n    }\n  }\n}\n\nvar RCTDeviceEventEmitter = function (_EventEmitter) {\n  _inherits(RCTDeviceEventEmitter, _EventEmitter);\n\n  var _super = _createSuper(RCTDeviceEventEmitter);\n\n  function RCTDeviceEventEmitter() {\n    var _this;\n\n    _classCallCheck(this, RCTDeviceEventEmitter);\n\n    var sharedSubscriber = new EventSubscriptionVendor();\n    _this = _super.call(this, sharedSubscriber);\n    _this.sharedSubscriber = sharedSubscriber;\n    return _this;\n  }\n\n  _createClass(RCTDeviceEventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      if (__DEV__) {\n        checkNativeEventModule(eventType);\n      }\n\n      return _get(_getPrototypeOf(RCTDeviceEventEmitter.prototype), \"addListener\", this).call(this, eventType, listener, context);\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      if (__DEV__) {\n        checkNativeEventModule(eventType);\n      }\n\n      _get(_getPrototypeOf(RCTDeviceEventEmitter.prototype), \"removeAllListeners\", this).call(this, eventType);\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      if (subscription.emitter !== this) {\n        subscription.emitter.removeSubscription(subscription);\n      } else {\n        _get(_getPrototypeOf(RCTDeviceEventEmitter.prototype), \"removeSubscription\", this).call(this, subscription);\n      }\n    }\n  }]);\n\n  return RCTDeviceEventEmitter;\n}(EventEmitter);\n\nmodule.exports = new RCTDeviceEventEmitter();","map":{"version":3,"sources":["C:/sites/fo-github/node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js"],"names":["EventEmitter","require","EventSubscriptionVendor","checkNativeEventModule","eventType","lastIndexOf","Error","RCTDeviceEventEmitter","sharedSubscriber","listener","context","__DEV__","subscription","emitter","removeSubscription","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,kCAA5B;;AACA,IAAMC,uBAAuB,GAAGD,OAAO,6CAAvC;;AAIA,SAASE,sBAAT,CAAgCC,SAAhC,EAAoD;AAClD,MAAIA,SAAJ,EAAe;AACb,QAAIA,SAAS,CAACC,WAAV,CAAsB,WAAtB,EAAmC,CAAnC,MAA0C,CAA9C,EAAiD;AAC/C,YAAM,IAAIC,KAAJ,CACJ,MACEF,SADF,GAEE,0DAHE,CAAN;AAKD;;AACD,QAAIA,SAAS,CAACC,WAAV,CAAsB,UAAtB,EAAkC,CAAlC,MAAyC,CAA7C,EAAgD;AAC9C,YAAM,IAAIC,KAAJ,CACJ,MACEF,SADF,GAEE,sDAHE,CAAN;AAKD;;AACD,QAAIA,SAAS,KAAK,mBAAd,IAAqCA,SAAS,KAAK,eAAvD,EAAwE;AACtE,YAAM,IAAIE,KAAJ,CACJ,MACEF,SADF,GAEE,sDAHE,CAAN;AAKD;AACF;AACF;;IAMKG,qB;;;;;AAGJ,mCAAc;AAAA;;AAAA;;AACZ,QAAMC,gBAAgB,GAAG,IAAIN,uBAAJ,EAAzB;AACA,8BAAMM,gBAAN;AACA,UAAKA,gBAAL,GAAwBA,gBAAxB;AAHY;AAIb;;;;gCAGCJ,S,EACAK,Q,EACAC,O,EACqB;AACrB,UAAIC,OAAJ,EAAa;AACXR,QAAAA,sBAAsB,CAACC,SAAD,CAAtB;AACD;;AACD,oGAAyBA,SAAzB,EAAoCK,QAApC,EAA8CC,OAA9C;AACD;;;uCAEkBN,S,EAAoB;AACrC,UAAIO,OAAJ,EAAa;AACXR,QAAAA,sBAAsB,CAACC,SAAD,CAAtB;AACD;;AACD,oGAAyBA,SAAzB;AACD;;;uCAEkBQ,Y,EAAmC;AACpD,UAAIA,YAAY,CAACC,OAAb,KAAyB,IAA7B,EAAmC;AACjCD,QAAAA,YAAY,CAACC,OAAb,CAAqBC,kBAArB,CAAwCF,YAAxC;AACD,OAFD,MAEO;AACL,sGAAyBA,YAAzB;AACD;AACF;;;;EAjCiCZ,Y;;AAoCpCe,MAAM,CAACC,OAAP,GAAkB,IAAIT,qBAAJ,EAAlB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst EventEmitter = require('../vendor/emitter/EventEmitter');\nconst EventSubscriptionVendor = require('../vendor/emitter/EventSubscriptionVendor');\n\nimport type EmitterSubscription from '../vendor/emitter/EmitterSubscription';\n\nfunction checkNativeEventModule(eventType: ?string) {\n  if (eventType) {\n    if (eventType.lastIndexOf('statusBar', 0) === 0) {\n      throw new Error(\n        '`' +\n          eventType +\n          '` event should be registered via the StatusBarIOS module',\n      );\n    }\n    if (eventType.lastIndexOf('keyboard', 0) === 0) {\n      throw new Error(\n        '`' +\n          eventType +\n          '` event should be registered via the Keyboard module',\n      );\n    }\n    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {\n      throw new Error(\n        '`' +\n          eventType +\n          '` event should be registered via the AppState module',\n      );\n    }\n  }\n}\n\n/**\n * Deprecated - subclass NativeEventEmitter to create granular event modules instead of\n * adding all event listeners directly to RCTDeviceEventEmitter.\n */\nclass RCTDeviceEventEmitter extends EventEmitter {\n  sharedSubscriber: EventSubscriptionVendor;\n\n  constructor() {\n    const sharedSubscriber = new EventSubscriptionVendor();\n    super(sharedSubscriber);\n    this.sharedSubscriber = sharedSubscriber;\n  }\n\n  addListener(\n    eventType: string,\n    listener: Function,\n    context: ?Object,\n  ): EmitterSubscription {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n    return super.addListener(eventType, listener, context);\n  }\n\n  removeAllListeners(eventType: ?string) {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n    super.removeAllListeners(eventType);\n  }\n\n  removeSubscription(subscription: EmitterSubscription) {\n    if (subscription.emitter !== this) {\n      subscription.emitter.removeSubscription(subscription);\n    } else {\n      super.removeSubscription(subscription);\n    }\n  }\n}\n\nmodule.exports = (new RCTDeviceEventEmitter(): RCTDeviceEventEmitter);\n"]},"metadata":{},"sourceType":"script"}
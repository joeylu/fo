{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _jsxFileName = \"C:\\\\sites\\\\fo-github\\\\app\\\\layout\\\\settings.js\",\n    _this = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useContext } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Divider, ButtonGroup } from 'react-native-elements';\nimport Slider from '@react-native-community/slider';\nimport AppContext from \"../utilities/context\";\nimport constants from \"../utilities/constants.json\";\nimport styles from \"../content/css/styles\";\nimport { Save, Load } from \"../utilities/storage\";\n\nvar Settings = function (_Component) {\n  _inherits(Settings, _Component);\n\n  var _super = _createSuper(Settings);\n\n  function Settings(props) {\n    _classCallCheck(this, Settings);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(Settings, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(SettingContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 16\n        }\n      });\n    }\n  }]);\n\n  return Settings;\n}(Component);\n\nexport { Settings as default };\n\nvar SettingContent = function SettingContent(props) {\n  var appStateContext = useContext(AppContext);\n\n  var SetSlider = function SetSlider(fontSize) {\n    if (!fontSize) {\n      fontSize = constants.settings.fontSize;\n    } else {\n      if (fontSize.toString() === appStateContext.settingFontSize.toString()) return;\n    }\n\n    Save(constants.settings.fontSizeName, fontSize).then(function (result) {\n      try {\n        fontSize = Number(fontSize);\n        appStateContext.set_font_size(fontSize);\n      } catch (e) {\n        console.log(e);\n      }\n    });\n  };\n\n  var SetTheme = function SetTheme(themeIndex) {\n    if (!themeIndex) {\n      themeIndex = constants.settings.themeIndex;\n    } else {\n      if (themeIndex.toString() === appStateContext.settingTheme.toString()) return;\n    }\n\n    Save(constants.settings.themeIndexName, themeIndex).then(function (result) {\n      try {\n        themeIndex = Number(themeIndex);\n        UpdateTheme(themeIndex);\n      } catch (e) {\n        console.log(e);\n      }\n    });\n  };\n\n  var UpdateTheme = function UpdateTheme(index) {\n    var themeIndex = 0;\n    var pageBg = styles.pageBodyLight,\n        pageFont = styles.pageFontLight,\n        headerBg = styles.headerBgLight,\n        tabBg = styles.tabBgLight;\n\n    if (index) {\n      switch (index) {\n        case 1:\n          themeIndex = index;\n          pageBg = styles.pageBodyDark;\n          pageFont = styles.pageFontDark;\n          headerBg = styles.headerBgDark;\n          tabBg = styles.tabBgDark;\n          break;\n\n        case 2:\n          themeIndex = index;\n          pageBg = styles.pageBodyBook;\n          pageFont = styles.pageFontBook;\n          headerBg = styles.headerBgBook;\n          tabBg = styles.tabBgBook;\n          break;\n      }\n    }\n\n    appStateContext.set_theme(themeIndex);\n    appStateContext.set_theme_page_background_color(pageBg);\n    appStateContext.set_theme_page_font_color(pageFont);\n    appStateContext.set_theme_header_background_color(headerBg);\n    appStateContext.set_theme_tab_background_color(tabBg);\n  };\n\n  var backColorLight = function backColorLight() {\n    return React.createElement(Text, {\n      style: [styles.settingButton, styles.settingButtonLight],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 34\n      }\n    }, \"\\u767D\");\n  };\n\n  var backColorDark = function backColorDark() {\n    return React.createElement(Text, {\n      style: [styles.settingButton, styles.settingButtonDark],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 33\n      }\n    }, \"\\u7070\");\n  };\n\n  var backColorBook = function backColorBook() {\n    return React.createElement(Text, {\n      style: [styles.settingButton, styles.settingButtonBook],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 33\n      }\n    }, \"\\u9EC4\");\n  };\n\n  var buttons = [{\n    element: backColorLight\n  }, {\n    element: backColorDark\n  }, {\n    element: backColorBook\n  }];\n  Load(constants.settings.fontSizeName).then(function (result) {\n    return SetSlider(result);\n  }).catch(function (error) {\n    console.log(\"error caught font size\");\n    SetSlider(constants.settings.fontSize);\n  });\n  Load(constants.settings.themeIndexName).then(function (result) {\n    return SetTheme(result);\n  }).catch(function (error) {\n    console.log(\"error caught theme\");\n    SetTheme(constants.settings.themeIndex);\n  });\n  return React.createElement(View, {\n    style: [styles.pageBody, appStateContext.settingThemePageBackgroundColor],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, React.createElement(ScrollView, {\n    contentContainerStyle: styles.contentPage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styles.contentRow,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: [{\n      fontSize: appStateContext.settingFontSize\n    }, appStateContext.settingThemePageFontColor],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }, \"\\u5B57\\u4F53\\u5C3A\\u5BF8\\uFF1A\", appStateContext.settingFontSize)), React.createElement(View, {\n    style: styles.contentCenterView,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, React.createElement(Slider, {\n    value: appStateContext.settingFontSize,\n    style: styles.settingSlider,\n    minimumValue: 10,\n    maximumValue: 30,\n    thumbTintColor: constants.defaultColor2,\n    step: 1,\n    onSlidingComplete: function onSlidingComplete(value) {\n      return SetSlider(value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  })), React.createElement(Divider, {\n    style: styles.divider,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    style: styles.contentRow,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: [{\n      fontSize: appStateContext.settingFontSize\n    }, appStateContext.settingThemePageFontColor],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 25\n    }\n  }, \"\\u4E3B\\u9898\\u914D\\u8272\\uFF1A\")), React.createElement(ButtonGroup, {\n    selectedIndex: appStateContext.settingTheme,\n    onPress: function onPress(value) {\n      return SetTheme(value);\n    },\n    innerBorderStyle: {\n      width: 0\n    },\n    buttons: buttons,\n    buttonStyle: appStateContext.settingThemePageBackgroundColor,\n    selectedButtonStyle: {\n      backgroundColor: constants.defaultColor1\n    },\n    containerStyle: {\n      height: 50,\n      borderWidth: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }))));\n};","map":{"version":3,"sources":["C:/sites/fo-github/app/layout/settings.js"],"names":["React","Component","useContext","Divider","ButtonGroup","Slider","AppContext","constants","styles","Save","Load","Settings","props","SettingContent","appStateContext","SetSlider","fontSize","settings","toString","settingFontSize","fontSizeName","then","result","Number","set_font_size","e","console","log","SetTheme","themeIndex","settingTheme","themeIndexName","UpdateTheme","index","pageBg","pageBodyLight","pageFont","pageFontLight","headerBg","headerBgLight","tabBg","tabBgLight","pageBodyDark","pageFontDark","headerBgDark","tabBgDark","pageBodyBook","pageFontBook","headerBgBook","tabBgBook","set_theme","set_theme_page_background_color","set_theme_page_font_color","set_theme_header_background_color","set_theme_tab_background_color","backColorLight","settingButton","settingButtonLight","backColorDark","settingButtonDark","backColorBook","settingButtonBook","buttons","element","catch","error","pageBody","settingThemePageBackgroundColor","contentPage","contentRow","settingThemePageFontColor","contentCenterView","settingSlider","defaultColor2","value","divider","width","backgroundColor","defaultColor1","height","borderWidth"],"mappings":"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","sourcesContent":["import React, { Component, useContext } from \"react\";\r\nimport { View, ScrollView, Text, Alert } from \"react-native\";\r\nimport { Divider, ButtonGroup } from 'react-native-elements';\r\nimport Slider from '@react-native-community/slider';\r\nimport AppContext from \"../utilities/context\";\r\nimport constants from \"../utilities/constants.json\";\r\nimport styles from \"../content/css/styles\";\r\nimport { Save, Load } from \"../utilities/storage\";\r\n\r\n\r\nexport default class Settings extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return <SettingContent />\r\n    }\r\n}\r\n\r\n\r\nconst SettingContent = props => {\r\n    const appStateContext = useContext(AppContext);\r\n\r\n    const SetSlider = (fontSize) => {    \r\n        if (!fontSize) { \r\n            fontSize = constants.settings.fontSize; \r\n        } else {\r\n            if (fontSize.toString() === appStateContext.settingFontSize.toString()) return; \r\n        }\r\n        Save(constants.settings.fontSizeName, fontSize).then(result => {\r\n            try {\r\n                fontSize = Number(fontSize);\r\n                appStateContext.set_font_size(fontSize)\r\n            } catch(e) {\r\n                console.log(e);\r\n            }\r\n        });\r\n    }\r\n    const SetTheme = (themeIndex) => {     \r\n        if (!themeIndex) {            \r\n            themeIndex = constants.settings.themeIndex; \r\n        } else {\r\n            if (themeIndex.toString() === appStateContext.settingTheme.toString()) return; \r\n        }\r\n        Save(constants.settings.themeIndexName, themeIndex).then(result => { \r\n            try {\r\n                themeIndex = Number(themeIndex);\r\n                UpdateTheme(themeIndex);\r\n            } catch(e) {                \r\n                console.log(e);\r\n            }\r\n        });\r\n    }\r\n    \r\n\r\n    const UpdateTheme = index => {\r\n        var themeIndex = 0;\r\n        var pageBg = styles.pageBodyLight, pageFont = styles.pageFontLight, headerBg = styles.headerBgLight, tabBg = styles.tabBgLight;\r\n        if (index) {\r\n            switch (index) {\r\n                case 1:\r\n                    themeIndex = index;\r\n                    pageBg = styles.pageBodyDark;\r\n                    pageFont = styles.pageFontDark;\r\n                    headerBg = styles.headerBgDark;\r\n                    tabBg = styles.tabBgDark;\r\n                    break;\r\n                case 2:\r\n                    themeIndex = index;\r\n                    pageBg = styles.pageBodyBook;\r\n                    pageFont = styles.pageFontBook;\r\n                    headerBg = styles.headerBgBook;\r\n                    tabBg = styles.tabBgBook;\r\n                    break;\r\n            }\r\n        }\r\n        \r\n        appStateContext.set_theme(themeIndex);\r\n        appStateContext.set_theme_page_background_color(pageBg);\r\n        appStateContext.set_theme_page_font_color(pageFont);\r\n        appStateContext.set_theme_header_background_color(headerBg);\r\n        appStateContext.set_theme_tab_background_color(tabBg);\r\n    }\r\n\r\n    const backColorLight = () => <Text style={[styles.settingButton, styles.settingButtonLight]}>白</Text>\r\n    const backColorDark = () => <Text style={[styles.settingButton, styles.settingButtonDark]}>灰</Text>\r\n    const backColorBook = () => <Text style={[styles.settingButton, styles.settingButtonBook]}>黄</Text>\r\n    const buttons = [{ element: backColorLight }, { element: backColorDark }, { element: backColorBook }]\r\n\r\n    Load(constants.settings.fontSizeName)\r\n        .then(result => SetSlider(result))\r\n        .catch(error => {   \r\n            console.log(\"error caught font size\");         \r\n            SetSlider(constants.settings.fontSize); \r\n        })\r\n\r\n    Load(constants.settings.themeIndexName)\r\n        .then(result => SetTheme(result))\r\n        .catch(error => {            \r\n            console.log(\"error caught theme\");       \r\n            SetTheme(constants.settings.themeIndex);\r\n        });\r\n\r\n\r\n    return (\r\n        <View style={[styles.pageBody, appStateContext.settingThemePageBackgroundColor]}>\r\n            <ScrollView contentContainerStyle={styles.contentPage}>    \r\n                <View style={styles.contentRow}>\r\n                    <Text style={[{fontSize: appStateContext.settingFontSize}, appStateContext.settingThemePageFontColor]}>字体尺寸：{appStateContext.settingFontSize}</Text>\r\n                </View>  \r\n                <View style={styles.contentCenterView}>   \r\n                    <Slider\r\n                        value={appStateContext.settingFontSize}\r\n                        style={styles.settingSlider}\r\n                        minimumValue={10}\r\n                        maximumValue={30}                            \r\n                        thumbTintColor={constants.defaultColor2}\r\n                        step={1}\r\n                        onSlidingComplete={value => SetSlider(value)}\r\n                    />\r\n                </View>               \r\n                <Divider style={styles.divider} />\r\n                <View>                    \r\n                    <View style={styles.contentRow}>\r\n                        <Text style={[{fontSize: appStateContext.settingFontSize}, appStateContext.settingThemePageFontColor]}>主题配色：</Text>\r\n                    </View>  \r\n                    <ButtonGroup\r\n                        selectedIndex = {appStateContext.settingTheme}\r\n                        onPress={value => SetTheme(value)}\r\n                        innerBorderStyle = {{width: 0}}\r\n                        buttons={buttons}\r\n                        buttonStyle = {appStateContext.settingThemePageBackgroundColor}\r\n                        selectedButtonStyle = {{backgroundColor: constants.defaultColor1}}\r\n                        containerStyle={{height: 50, borderWidth: 0}} />\r\n                </View>\r\n            </ScrollView>\r\n        </View>\r\n    )   \r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}
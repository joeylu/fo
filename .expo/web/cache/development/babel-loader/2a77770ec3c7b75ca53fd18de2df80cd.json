{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport omit from 'lodash/omit';\nimport nullthrows from 'nullthrows';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport { assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getNativeSourceFromSource, getUnloadedStatus, PlaybackMixin } from \"./AV\";\nimport ExpoVideoManager from \"./ExpoVideoManager\";\nimport ExponentAV from \"./ExponentAV\";\nimport ExponentVideo from \"./ExponentVideo\";\nimport { ResizeMode } from \"./Video.types\";\nexport { ResizeMode };\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\nvar _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden'\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain'\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0\n  }\n});\n\nvar ExpoVideoManagerConstants = ExpoVideoManager;\nvar ExpoVideoViewManager = ExpoVideoManager;\n\nvar Video = function () {\n  var Video = function (_React$Component) {\n    _inherits(Video, _React$Component);\n\n    var _super = _createSuper(Video);\n\n    function Video(props) {\n      var _this;\n\n      _classCallCheck(this, Video);\n\n      _this = _super.call(this, props);\n      _this._nativeRef = React.createRef();\n      _this._onPlaybackStatusUpdate = null;\n\n      _this._handleNewStatus = function (status) {\n        if (_this.state.showPoster && status.isLoaded && (status.isPlaying || status.positionMillis !== 0)) {\n          _this.setState({\n            showPoster: false\n          });\n        }\n\n        if (_this.props.onPlaybackStatusUpdate) {\n          _this.props.onPlaybackStatusUpdate(status);\n        }\n\n        if (_this._onPlaybackStatusUpdate) {\n          _this._onPlaybackStatusUpdate(status);\n        }\n      };\n\n      _this._performOperationAndHandleStatusAsync = function _callee(operation) {\n        var video, handle, status;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                video = _this._nativeRef.current;\n\n                if (video) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw new Error(\"Cannot complete operation because the Video component has not yet loaded\");\n\n              case 3:\n                handle = findNodeHandle(_this._nativeRef.current);\n                _context.next = 6;\n                return _regeneratorRuntime.awrap(operation(handle));\n\n              case 6:\n                status = _context.sent;\n\n                _this._handleNewStatus(status);\n\n                return _context.abrupt(\"return\", status);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      _this._setFullscreen = function _callee2(value) {\n        return _regeneratorRuntime.async(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                  return ExpoVideoViewManager.setFullscreen(tag, value);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      _this.presentFullscreenPlayer = function _callee3() {\n        return _regeneratorRuntime.async(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", _this._setFullscreen(true));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      _this.presentIOSFullscreenPlayer = function () {\n        console.warn(\"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\");\n        return _this.presentFullscreenPlayer();\n      };\n\n      _this.presentFullscreenPlayerAsync = function _callee4() {\n        return _regeneratorRuntime.async(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _regeneratorRuntime.awrap(_this.presentFullscreenPlayer());\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      _this.dismissFullscreenPlayer = function _callee5() {\n        return _regeneratorRuntime.async(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", _this._setFullscreen(false));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      _this.dismissIOSFullscreenPlayer = function () {\n        console.warn(\"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\");\n\n        _this.dismissFullscreenPlayer();\n      };\n\n      _this.getStatusAsync = function _callee6() {\n        return _regeneratorRuntime.async(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                  return ExponentAV.getStatusForVideo(tag);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      _this.loadAsync = function _callee7(source) {\n        var initialStatus,\n            downloadFirst,\n            _await$getNativeSourc,\n            nativeSource,\n            fullInitialStatus,\n            _args7 = arguments;\n\n        return _regeneratorRuntime.async(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                initialStatus = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n                downloadFirst = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : true;\n                _context7.next = 4;\n                return _regeneratorRuntime.awrap(getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst));\n\n              case 4:\n                _await$getNativeSourc = _context7.sent;\n                nativeSource = _await$getNativeSourc.nativeSource;\n                fullInitialStatus = _await$getNativeSourc.fullInitialStatus;\n                return _context7.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                  return ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus);\n                }));\n\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      _this.unloadAsync = function _callee8() {\n        return _regeneratorRuntime.async(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                  return ExponentAV.unloadForVideo(tag);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      _this.setStatusAsync = function _callee9(status) {\n        return _regeneratorRuntime.async(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assertStatusValuesInBounds(status);\n                return _context9.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                  return ExponentAV.setStatusForVideo(tag, status);\n                }));\n\n              case 2:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      _this.replayAsync = function _callee10() {\n        var status,\n            _args10 = arguments;\n        return _regeneratorRuntime.async(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                status = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};\n\n                if (!(status.positionMillis && status.positionMillis !== 0)) {\n                  _context10.next = 3;\n                  break;\n                }\n\n                throw new Error('Requested position after replay has to be 0.');\n\n              case 3:\n                return _context10.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                  return ExponentAV.replayVideo(tag, _objectSpread(_objectSpread({}, status), {}, {\n                    positionMillis: 0,\n                    shouldPlay: true\n                  }));\n                }));\n\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      _this._nativeOnPlaybackStatusUpdate = function (event) {\n        _this._handleNewStatus(event.nativeEvent);\n      };\n\n      _this._nativeOnLoadStart = function () {\n        if (_this.props.onLoadStart) {\n          _this.props.onLoadStart();\n        }\n      };\n\n      _this._nativeOnLoad = function (event) {\n        if (_this.props.onLoad) {\n          _this.props.onLoad(event.nativeEvent);\n        }\n\n        _this._handleNewStatus(event.nativeEvent);\n      };\n\n      _this._nativeOnError = function (event) {\n        var error = event.nativeEvent.error;\n\n        if (_this.props.onError) {\n          _this.props.onError(error);\n        }\n\n        _this._handleNewStatus(getUnloadedStatus(error));\n      };\n\n      _this._nativeOnReadyForDisplay = function (event) {\n        if (_this.props.onReadyForDisplay) {\n          _this.props.onReadyForDisplay(event.nativeEvent);\n        }\n      };\n\n      _this._nativeOnFullscreenUpdate = function (event) {\n        if (_this.props.onIOSFullscreenUpdate && _this.props.onFullscreenUpdate) {\n          console.warn(\"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\");\n        } else if (_this.props.onIOSFullscreenUpdate) {\n          console.warn(\"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\");\n        }\n\n        if (_this.props.onIOSFullscreenUpdate) {\n          _this.props.onIOSFullscreenUpdate(event.nativeEvent);\n        }\n\n        if (_this.props.onFullscreenUpdate) {\n          _this.props.onFullscreenUpdate(event.nativeEvent);\n        }\n      };\n\n      _this._renderPoster = function () {\n        return _this.props.usePoster && _this.state.showPoster ? React.createElement(Image, {\n          style: [_STYLES.poster, _this.props.posterStyle],\n          source: _this.props.posterSource\n        }) : null;\n      };\n\n      _this.state = {\n        showPoster: !!props.usePoster\n      };\n      return _this;\n    }\n\n    _createClass(Video, [{\n      key: \"setNativeProps\",\n      value: function setNativeProps(nativeProps) {\n        var nativeVideo = nullthrows(this._nativeRef.current);\n        nativeVideo.setNativeProps(nativeProps);\n      }\n    }, {\n      key: \"setOnPlaybackStatusUpdate\",\n      value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n        this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n        this.getStatusAsync();\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        var source = getNativeSourceFromSource(this.props.source) || undefined;\n        var nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n\n        if (this.props.resizeMode) {\n          var resizeMode = this.props.resizeMode;\n\n          if (resizeMode === ResizeMode.STRETCH) {\n            nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n          } else if (resizeMode === ResizeMode.CONTAIN) {\n            nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n          } else if (resizeMode === ResizeMode.COVER) {\n            nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n          }\n        }\n\n        var status = _objectSpread({}, this.props.status);\n\n        ['progressUpdateIntervalMillis', 'positionMillis', 'shouldPlay', 'rate', 'shouldCorrectPitch', 'volume', 'isMuted', 'isLooping'].forEach(function (prop) {\n          if (prop in _this2.props) {\n            status[prop] = _this2.props[prop];\n          }\n        });\n\n        var nativeProps = _objectSpread(_objectSpread({}, omit.apply(void 0, [this.props, 'source', 'onPlaybackStatusUpdate', 'usePoster', 'posterSource'].concat(_toConsumableArray(Object.keys(status))))), {}, {\n          style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n          source: source,\n          resizeMode: nativeResizeMode,\n          status: status,\n          onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n          onLoadStart: this._nativeOnLoadStart,\n          onLoad: this._nativeOnLoad,\n          onError: this._nativeOnError,\n          onReadyForDisplay: this._nativeOnReadyForDisplay,\n          onFullscreenUpdate: this._nativeOnFullscreenUpdate\n        });\n\n        return React.createElement(View, {\n          style: nativeProps.style,\n          pointerEvents: \"box-none\"\n        }, React.createElement(ExponentVideo, _extends({\n          ref: this._nativeRef\n        }, nativeProps, {\n          style: _STYLES.video\n        })), this._renderPoster());\n      }\n    }]);\n\n    return Video;\n  }(React.Component);\n\n  Video.RESIZE_MODE_CONTAIN = ResizeMode.CONTAIN;\n  Video.RESIZE_MODE_COVER = ResizeMode.COVER;\n  Video.RESIZE_MODE_STRETCH = ResizeMode.STRETCH;\n  Video.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  Video.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  Video.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  Video.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n  Video.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  Video.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  Video.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  Video.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n  Video.propTypes = _objectSpread({\n    source: PropTypes.oneOfType([PropTypes.shape({\n      uri: PropTypes.string,\n      overrideFileExtensionAndroid: PropTypes.string\n    }), PropTypes.number]),\n    posterSource: PropTypes.oneOfType([PropTypes.shape({\n      uri: PropTypes.string\n    }), PropTypes.number]),\n    posterStyle: ViewPropTypes.style,\n    onPlaybackStatusUpdate: PropTypes.func,\n    onLoadStart: PropTypes.func,\n    onLoad: PropTypes.func,\n    onError: PropTypes.func,\n    onIOSFullscreenUpdate: PropTypes.func,\n    onFullscreenUpdate: PropTypes.func,\n    onReadyForDisplay: PropTypes.func,\n    useNativeControls: PropTypes.bool,\n    resizeMode: PropTypes.string,\n    usePoster: PropTypes.bool,\n    status: PropTypes.shape({\n      progressUpdateIntervalMillis: PropTypes.number,\n      positionMillis: PropTypes.number,\n      shouldPlay: PropTypes.bool,\n      rate: PropTypes.number,\n      shouldCorrectPitch: PropTypes.bool,\n      volume: PropTypes.number,\n      isMuted: PropTypes.bool,\n      isLooping: PropTypes.bool\n    }),\n    progressUpdateIntervalMillis: PropTypes.number,\n    positionMillis: PropTypes.number,\n    shouldPlay: PropTypes.bool,\n    rate: PropTypes.number,\n    shouldCorrectPitch: PropTypes.bool,\n    volume: PropTypes.number,\n    isMuted: PropTypes.bool,\n    isLooping: PropTypes.bool,\n    scaleX: PropTypes.number,\n    scaleY: PropTypes.number,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    rotation: PropTypes.number\n  }, ViewPropTypes);\n  return Video;\n}();\n\nexport default Video;\n\n_extends(Video.prototype, PlaybackMixin);","map":{"version":3,"sources":["../src/Video.tsx"],"names":[],"mappings":"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","sourcesContent":["import omit from 'lodash/omit';\nimport nullthrows from 'nullthrows';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {\n  findNodeHandle,\n  Image,\n  NativeMethods,\n  StyleSheet,\n  View,\n  ViewPropTypes,\n} from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackNativeSource,\n} from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoNaturalSize,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n} from './Video.types';\n\nexport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoNaturalSize,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackNativeSource,\n};\n\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\n\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nexport default class Video extends React.Component<VideoProps, VideoState> implements Playback {\n  static RESIZE_MODE_CONTAIN = ResizeMode.CONTAIN;\n  static RESIZE_MODE_COVER = ResizeMode.COVER;\n  static RESIZE_MODE_STRETCH = ResizeMode.STRETCH;\n\n  static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n  static FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  static FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  static FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  static FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n  static propTypes = {\n    // Source stuff\n    source: PropTypes.oneOfType([\n      PropTypes.shape({\n        uri: PropTypes.string,\n        overrideFileExtensionAndroid: PropTypes.string,\n      }), // remote URI like { uri: 'http://foo/bar.mp4' }\n      PropTypes.number, // asset module like require('./foo/bar.mp4')\n    ]),\n    posterSource: PropTypes.oneOfType([\n      PropTypes.shape({\n        uri: PropTypes.string,\n      }), // remote URI like { uri: 'http://foo/bar.mp4' }\n      PropTypes.number, // asset module like require('./foo/bar.mp4')\n    ]),\n    posterStyle: ViewPropTypes.style,\n\n    // Callbacks\n    onPlaybackStatusUpdate: PropTypes.func,\n    onLoadStart: PropTypes.func,\n    onLoad: PropTypes.func,\n    onError: PropTypes.func,\n    onIOSFullscreenUpdate: PropTypes.func,\n    onFullscreenUpdate: PropTypes.func,\n    onReadyForDisplay: PropTypes.func,\n\n    // UI stuff\n    useNativeControls: PropTypes.bool,\n    resizeMode: PropTypes.string,\n    usePoster: PropTypes.bool,\n\n    // Playback API\n    status: PropTypes.shape({\n      progressUpdateIntervalMillis: PropTypes.number,\n      positionMillis: PropTypes.number,\n      shouldPlay: PropTypes.bool,\n      rate: PropTypes.number,\n      shouldCorrectPitch: PropTypes.bool,\n      volume: PropTypes.number,\n      isMuted: PropTypes.bool,\n      isLooping: PropTypes.bool,\n    }),\n    progressUpdateIntervalMillis: PropTypes.number,\n    positionMillis: PropTypes.number,\n    shouldPlay: PropTypes.bool,\n    rate: PropTypes.number,\n    shouldCorrectPitch: PropTypes.bool,\n    volume: PropTypes.number,\n    isMuted: PropTypes.bool,\n    isLooping: PropTypes.bool,\n\n    // Required by react-native\n    scaleX: PropTypes.number,\n    scaleY: PropTypes.number,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    rotation: PropTypes.number,\n    ...ViewPropTypes,\n  };\n\n  _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeMethods>();\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n  // componentOrHandle: null | number | React.Component<any, any> | React.ComponentClass<any>\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  setNativeProps(nativeProps: VideoNativeProps) {\n    const nativeVideo = nullthrows(this._nativeRef.current);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: AVPlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    const handle = findNodeHandle(this._nativeRef.current)!;\n    const status: AVPlaybackStatus = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // ### iOS Fullscreening API ###\n\n  _setFullscreen = async (value: boolean) => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExpoVideoViewManager.setFullscreen(tag, value)\n    );\n  };\n\n  presentFullscreenPlayer = async () => {\n    return this._setFullscreen(true);\n  };\n\n  presentIOSFullscreenPlayer = () => {\n    console.warn(\n      \"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\"\n    );\n    return this.presentFullscreenPlayer();\n  };\n\n  presentFullscreenPlayerAsync = async () => {\n    return await this.presentFullscreenPlayer();\n  };\n\n  dismissFullscreenPlayer = async () => {\n    return this._setFullscreen(false);\n  };\n\n  dismissIOSFullscreenPlayer = () => {\n    console.warn(\n      \"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\"\n    );\n    this.dismissFullscreenPlayer();\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  // Loading / unloading API\n\n  loadAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> => {\n    const {\n      nativeSource,\n      fullInitialStatus,\n    } = await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  // Equivalent to setting URI to null.\n  unloadAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  // Set status API (only available while isLoaded = true)\n\n  setStatusAsync = async (status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  replayAsync = async (status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (rate: number, shouldCorrectPitch: boolean) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n\n  // ### Callback wrappers ###\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: AVPlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: AVPlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: VideoReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: VideoFullscreenUpdateEvent }) => {\n    if (this.props.onIOSFullscreenUpdate && this.props.onFullscreenUpdate) {\n      console.warn(\n        \"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\"\n      );\n    } else if (this.props.onIOSFullscreenUpdate) {\n      console.warn(\n        \"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\"\n      );\n    }\n\n    if (this.props.onIOSFullscreenUpdate) {\n      this.props.onIOSFullscreenUpdate(event.nativeEvent);\n    }\n\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () =>\n    this.props.usePoster && this.state.showPoster ? (\n      // @ts-ignore: the react-native type declarations are overly restrictive\n      <Image style={[_STYLES.poster, this.props.posterStyle]} source={this.props.posterSource!} />\n    ) : null;\n\n  render() {\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: AVPlaybackStatusToSet = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach(prop => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props\n    // @ts-ignore: TypeScript thinks \"children\" is not in the list of props\n    const nativeProps: VideoNativeProps = {\n      ...omit(\n        this.props,\n        'source',\n        'onPlaybackStatusUpdate',\n        'usePoster',\n        'posterSource',\n        ...Object.keys(status)\n      ),\n      style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style} pointerEvents=\"box-none\">\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={_STYLES.video} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\sites\\\\fo_expo\\\\fo\\\\app\\\\book\\\\tabbar.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\n\nvar TabBar = function (_Component) {\n  _inherits(TabBar, _Component);\n\n  var _super = _createSuper(TabBar);\n\n  function TabBar() {\n    _classCallCheck(this, TabBar);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TabBar, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: {\n          flexDirection: \"row\",\n          paddingTop: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 7,\n          columnNumber: 7\n        }\n      }, state.routes.map(function (route, index) {\n        var options = descriptors[route.key].options;\n        var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n        var isFocused = state.index === index;\n\n        var onPress = function onPress() {\n          var event = navigation.emit({\n            type: \"tabPress\",\n            target: route.key\n          });\n\n          if (!isFocused && !event.defaultPrevented) {\n            navigation.navigate(route.name);\n          }\n        };\n\n        var onLongPress = function onLongPress() {\n          navigation.emit({\n            type: \"tabLongPress\",\n            target: route.key\n          });\n        };\n\n        var inputRange = state.routes.map(function (_, i) {\n          return i;\n        });\n        var opacity = Animated.interpolate(position, {\n          inputRange: inputRange,\n          outputRange: inputRange.map(function (i) {\n            return i === index ? 1 : 0;\n          })\n        });\n        return React.createElement(TouchableOpacity, {\n          accessibilityRole: \"button\",\n          accessibilityStates: isFocused ? [\"selected\"] : [],\n          accessibilityLabel: options.tabBarAccessibilityLabel,\n          testID: options.tabBarTestID,\n          onPress: onPress,\n          onLongPress: onLongPress,\n          style: {\n            flex: 1\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }\n        }, React.createElement(Animated.Text, {\n          style: {\n            opacity: opacity\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }\n        }, label));\n      }));\n    }\n  }]);\n\n  return TabBar;\n}(Component);\n\nexport { TabBar as default };","map":{"version":3,"sources":["C:/sites/fo_expo/fo/app/book/tabbar.js"],"names":["React","Component","TabBar","flexDirection","paddingTop","state","routes","map","route","index","options","descriptors","key","label","tabBarLabel","undefined","title","name","isFocused","onPress","event","navigation","emit","type","target","defaultPrevented","navigate","onLongPress","inputRange","_","i","opacity","Animated","interpolate","position","outputRange","tabBarAccessibilityLabel","tabBarTestID","flex"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;IAGqBC,M;;;;;;;;;;;;;6BACV;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,aAAa,EAAE,KAAjB;AAAwBC,UAAAA,UAAU,EAAE;AAApC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGC,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiB,UAACC,KAAD,EAAQC,KAAR,EAAkB;AAAA,YAC1BC,OAD0B,GACdC,WAAW,CAACH,KAAK,CAACI,GAAP,CADG,CAC1BF,OAD0B;AAElC,YAAMG,KAAK,GACTH,OAAO,CAACI,WAAR,KAAwBC,SAAxB,GACIL,OAAO,CAACI,WADZ,GAEIJ,OAAO,CAACM,KAAR,KAAkBD,SAAlB,GACAL,OAAO,CAACM,KADR,GAEAR,KAAK,CAACS,IALZ;AAOA,YAAMC,SAAS,GAAGb,KAAK,CAACI,KAAN,KAAgBA,KAAlC;;AAEA,YAAMU,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,cAAMC,KAAK,GAAGC,UAAU,CAACC,IAAX,CAAgB;AAC5BC,YAAAA,IAAI,EAAE,UADsB;AAE5BC,YAAAA,MAAM,EAAEhB,KAAK,CAACI;AAFc,WAAhB,CAAd;;AAKA,cAAI,CAACM,SAAD,IAAc,CAACE,KAAK,CAACK,gBAAzB,EAA2C;AACzCJ,YAAAA,UAAU,CAACK,QAAX,CAAoBlB,KAAK,CAACS,IAA1B;AACD;AACF,SATD;;AAWA,YAAMU,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBN,UAAAA,UAAU,CAACC,IAAX,CAAgB;AACdC,YAAAA,IAAI,EAAE,cADQ;AAEdC,YAAAA,MAAM,EAAEhB,KAAK,CAACI;AAFA,WAAhB;AAID,SALD;;AAOA,YAAMgB,UAAU,GAAGvB,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiB,UAACsB,CAAD,EAAIC,CAAJ;AAAA,iBAAUA,CAAV;AAAA,SAAjB,CAAnB;AACA,YAAMC,OAAO,GAAGC,QAAQ,CAACC,WAAT,CAAqBC,QAArB,EAA+B;AAC7CN,UAAAA,UAAU,EAAVA,UAD6C;AAE7CO,UAAAA,WAAW,EAAEP,UAAU,CAACrB,GAAX,CAAe,UAACuB,CAAD;AAAA,mBAAQA,CAAC,KAAKrB,KAAN,GAAc,CAAd,GAAkB,CAA1B;AAAA,WAAf;AAFgC,SAA/B,CAAhB;AAKA,eACE,oBAAC,gBAAD;AACE,UAAA,iBAAiB,EAAC,QADpB;AAEE,UAAA,mBAAmB,EAAES,SAAS,GAAG,CAAC,UAAD,CAAH,GAAkB,EAFlD;AAGE,UAAA,kBAAkB,EAAER,OAAO,CAAC0B,wBAH9B;AAIE,UAAA,MAAM,EAAE1B,OAAO,CAAC2B,YAJlB;AAKE,UAAA,OAAO,EAAElB,OALX;AAME,UAAA,WAAW,EAAEQ,WANf;AAOE,UAAA,KAAK,EAAE;AAAEW,YAAAA,IAAI,EAAE;AAAR,WAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WASE,oBAAC,QAAD,CAAU,IAAV;AAAe,UAAA,KAAK,EAAE;AAAEP,YAAAA,OAAO,EAAPA;AAAF,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAoClB,KAApC,CATF,CADF;AAaD,OAhDA,CADH,CADF;AAqDD;;;;EAvDiCZ,S;;SAAfC,M","sourcesContent":["import React, { Component } from \"react\";\r\nimport { View, ScrollView, Text, StyleSheet } from \"react-native\";\r\n\r\nexport default class TabBar extends Component {\r\n  render() {\r\n    return (\r\n      <View style={{ flexDirection: \"row\", paddingTop: 20 }}>\r\n        {state.routes.map((route, index) => {\r\n          const { options } = descriptors[route.key];\r\n          const label =\r\n            options.tabBarLabel !== undefined\r\n              ? options.tabBarLabel\r\n              : options.title !== undefined\r\n              ? options.title\r\n              : route.name;\r\n\r\n          const isFocused = state.index === index;\r\n\r\n          const onPress = () => {\r\n            const event = navigation.emit({\r\n              type: \"tabPress\",\r\n              target: route.key,\r\n            });\r\n\r\n            if (!isFocused && !event.defaultPrevented) {\r\n              navigation.navigate(route.name);\r\n            }\r\n          };\r\n\r\n          const onLongPress = () => {\r\n            navigation.emit({\r\n              type: \"tabLongPress\",\r\n              target: route.key,\r\n            });\r\n          };\r\n          // modify inputRange for custom behavior\r\n          const inputRange = state.routes.map((_, i) => i);\r\n          const opacity = Animated.interpolate(position, {\r\n            inputRange,\r\n            outputRange: inputRange.map((i) => (i === index ? 1 : 0)),\r\n          });\r\n\r\n          return (\r\n            <TouchableOpacity\r\n              accessibilityRole=\"button\"\r\n              accessibilityStates={isFocused ? [\"selected\"] : []}\r\n              accessibilityLabel={options.tabBarAccessibilityLabel}\r\n              testID={options.tabBarTestID}\r\n              onPress={onPress}\r\n              onLongPress={onLongPress}\r\n              style={{ flex: 1 }}\r\n            >\r\n              <Animated.Text style={{ opacity }}>{label}</Animated.Text>\r\n            </TouchableOpacity>\r\n          );\r\n        })}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as FileSystem from \"expo-file-system\";\nexport var mp3Folder = FileSystem.documentDirectory;\nexport function GetFileInfo(mp3) {\n  return _regeneratorRuntime.async(function GetFileInfo$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(FileSystem.getInfoAsync(mp3Folder + mp3));\n\n        case 3:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\nexport var CheckFileExist = function CheckFileExist(mp3) {\n  try {\n    getFileInfo(mp3).then(function (result) {\n      console.log(\"CheckFileExist: \" + mp3Folder + mp3 + \": \" + result.exists);\n      return result.exists;\n    });\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n};\n\nvar downloadCallback = function downloadCallback(downloadProgress) {\n  var download_percentage = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite * 100;\n  downloadHandler(download_percentage);\n};\n\nvar downloadHandler = function handler() {};\n\nvar fileHandler = function handler() {};\n\nexport function DownloadFile(mp3, handler) {\n  var downloadResumable;\n  return _regeneratorRuntime.async(function DownloadFile$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          downloadHandler = handler;\n          _context2.prev = 1;\n          console.log(\"downloadResumable downloadAsync\");\n          downloadResumable = FileSystem.createDownloadResumable(\"https://exchangepromise.com/fo/\" + mp3, mp3Folder + mp3, {}, downloadCallback);\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(downloadResumable.downloadAsync());\n\n        case 6:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log(\"DownloadFile error\");\n          downloadHandler(0, _context2.t0);\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n}\nexport function DeleteFiles(mp3, handler) {\n  return _regeneratorRuntime.async(function DeleteFiles$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          fileHandler = handler;\n          _context3.prev = 1;\n          console.log(\"deleteAsync started\");\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(FileSystem.deleteAsync(mp3Folder + mp3));\n\n        case 5:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](1);\n          console.log(\"Deleting error\");\n          fileHandler(0, _context3.t0);\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[1, 8]], Promise);\n}","map":{"version":3,"sources":["C:/sites/fo-github/app/utilities/files.js"],"names":["FileSystem","mp3Folder","documentDirectory","GetFileInfo","mp3","getInfoAsync","console","error","CheckFileExist","getFileInfo","then","result","log","exists","e","downloadCallback","downloadProgress","download_percentage","totalBytesWritten","totalBytesExpectedToWrite","downloadHandler","handler","fileHandler","DownloadFile","downloadResumable","createDownloadResumable","downloadAsync","DeleteFiles","deleteAsync"],"mappings":";AAAA,OAAO,KAAKA,UAAZ,MAA4B,kBAA5B;AAEA,OAAO,IAAMC,SAAS,GAAGD,UAAU,CAACE,iBAA7B;AAEP,OAAO,SAAeC,WAAf,CAA2BC,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEUJ,UAAU,CAACK,YAAX,CAAwBJ,SAAS,GAAGG,GAApC,CAFV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIHE,UAAAA,OAAO,CAACC,KAAR;;AAJG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACJ,GAAD,EAAS;AACrC,MAAI;AACFK,IAAAA,WAAW,CAACL,GAAD,CAAX,CAAiBM,IAAjB,CAAsB,UAACC,MAAD,EAAY;AAChCL,MAAAA,OAAO,CAACM,GAAR,CAAY,qBAAqBX,SAArB,GAAiCG,GAAjC,GAAuC,IAAvC,GAA8CO,MAAM,CAACE,MAAjE;AACA,aAAOF,MAAM,CAACE,MAAd;AACD,KAHD;AAID,GALD,CAKE,OAAOC,CAAP,EAAU;AACVR,IAAAA,OAAO,CAACC,KAAR,CAAcO,CAAd;AACA,WAAO,KAAP;AACD;AACF,CAVM;;AAYP,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,gBAAD,EAAsB;AAC7C,MAAMC,mBAAmB,GACtBD,gBAAgB,CAACE,iBAAjB,GACCF,gBAAgB,CAACG,yBADnB,GAEA,GAHF;AAIEC,EAAAA,eAAe,CAACH,mBAAD,CAAf;AACH,CAND;;AASA,IAAIG,eAAe,GAAG,SAASC,OAAT,GAAkB,CAAE,CAA1C;;AACA,IAAIC,WAAW,GAAG,SAASD,OAAT,GAAkB,CAAE,CAAtC;;AAEA,OAAO,SAAeE,YAAf,CAA4BnB,GAA5B,EAAiCiB,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACLD,UAAAA,eAAe,GAAGC,OAAlB;AADK;AAGHf,UAAAA,OAAO,CAACM,GAAR,CAAY,iCAAZ;AACMY,UAAAA,iBAJH,GAIuBxB,UAAU,CAACyB,uBAAX,CACxB,oCAAoCrB,GADZ,EAExBH,SAAS,GAAGG,GAFY,EAGxB,EAHwB,EAIxBW,gBAJwB,CAJvB;AAAA;AAAA,2CAUUS,iBAAiB,CAACE,aAAlB,EAVV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYHpB,UAAAA,OAAO,CAACM,GAAR,CAAY,oBAAZ;AACAQ,UAAAA,eAAe,CAAC,CAAD,eAAf;;AAbG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBP,OAAO,SAAeO,WAAf,CAA2BvB,GAA3B,EAAgCiB,OAAhC;AAAA;AAAA;AAAA;AAAA;AACLC,UAAAA,WAAW,GAAGD,OAAd;AADK;AAGHf,UAAAA,OAAO,CAACM,GAAR,CAAY,qBAAZ;AAHG;AAAA,2CAIUZ,UAAU,CAAC4B,WAAX,CAAuB3B,SAAS,GAAGG,GAAnC,CAJV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMHE,UAAAA,OAAO,CAACM,GAAR,CAAY,gBAAZ;AACAU,UAAAA,WAAW,CAAC,CAAD,eAAX;;AAPG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as FileSystem from \"expo-file-system\";\r\n\r\nexport const mp3Folder = FileSystem.documentDirectory;\r\n\r\nexport async function GetFileInfo(mp3) {\r\n  try {\r\n    return await FileSystem.getInfoAsync(mp3Folder + mp3);\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\nexport const CheckFileExist = (mp3) => {\r\n  try {\r\n    getFileInfo(mp3).then((result) => {\r\n      console.log(\"CheckFileExist: \" + mp3Folder + mp3 + \": \" + result.exists);\r\n      return result.exists;\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    return false;\r\n  }\r\n};\r\n\r\nconst downloadCallback = (downloadProgress) => {\r\n  const download_percentage =\r\n    (downloadProgress.totalBytesWritten /\r\n      downloadProgress.totalBytesExpectedToWrite) *\r\n    100;\r\n    downloadHandler(download_percentage);\r\n};\r\n\r\n\r\nlet downloadHandler = function handler(){};\r\nlet fileHandler = function handler(){};\r\n\r\nexport async function DownloadFile(mp3, handler) {\r\n  downloadHandler = handler;\r\n  try {\r\n    console.log(\"downloadResumable downloadAsync\");\r\n    const downloadResumable = FileSystem.createDownloadResumable(\r\n      \"https://exchangepromise.com/fo/\" + mp3, //remote url\r\n      mp3Folder + mp3, //target uri\r\n      {}, //options: md5, header\r\n      downloadCallback //callback progress\r\n    );\r\n    return await downloadResumable.downloadAsync();\r\n  } catch (e) {\r\n    console.log(\"DownloadFile error\");\r\n    downloadHandler(0, e);\r\n  }\r\n}\r\n\r\nexport async function DeleteFiles(mp3, handler) {\r\n  fileHandler = handler;\r\n  try {\r\n    console.log(\"deleteAsync started\");\r\n    return await FileSystem.deleteAsync(mp3Folder + mp3);\r\n  } catch (e) {    \r\n    console.log(\"Deleting error\");\r\n    fileHandler(0, e);\r\n  }\r\n}\r\n\r\n// class Download {}\r\n\r\n// const fileInfo = new FileInfo();\r\n// export default fileInfo;\r\n"]},"metadata":{},"sourceType":"module"}